{"version":3,"sources":["webpack:///./src/api.js","webpack:///./src/store/slices/ui.js","webpack:///./src/components/Analytics.js","webpack:///./src/components/Header.js","webpack:///./src/store/middleware/analytics.js","webpack:///./src/components/SubmitAnswer.js","webpack:///./src/utils.js","webpack:///./src/store/slices/binarySearch.js","webpack:///./src/pages/BinarySearch/Experiment.js","webpack:///./src/pages/BinarySearch/Instructions.js","webpack:///./src/pages/BinarySearch/index.js","webpack:///./src/pages/Home.js","webpack:///./src/store/slices/linearSearch.js","webpack:///./src/pages/LinearSearch/Experiment.js","webpack:///./src/pages/LinearSearch/Instructions.js","webpack:///./src/pages/LinearSearch/index.js","webpack:///./src/store/slices/randomSearchWithoutReplacement.js","webpack:///./src/pages/RandomSearchWithoutReplacement/Experiment.js","webpack:///./src/pages/RandomSearchWithoutReplacement/Instructions.js","webpack:///./src/pages/RandomSearchWithoutReplacement/index.js","webpack:///./src/store/slices/randomSearchWithReplacement.js","webpack:///./src/pages/RandomSearchWithReplacement/Experiment.js","webpack:///./src/pages/RandomSearchWithReplacement/Instructions.js","webpack:///./src/pages/RandomSearchWithReplacement/index.js","webpack:///./src/components/TabBar.js","webpack:///./src/App.js","webpack:///./src/theme.js","webpack:///./src/store/index.js","webpack:///./src/index.js"],"names":["api","axios","create","baseURL","process","interceptors","request","use","id","headers","localStorage","getItem","uuid","setItem","submit","experimentKey","actionLog","a","post","key","log","fetch","get","params","response","data","slice","createSlice","name","initialState","selectedTab","showSubmitModal","showAnalyticsModal","reducers","setSelectedTab","state","action","tabKey","payload","setShowSubmitModal","setShowAnalyticsModal","actions","useStyles","makeStyles","divider","margin","submissionTitle","marginBottom","DialogTitle","Analytics","props","classes","dispatch","useDispatch","useSelector","ui","isOpen","useState","k1","k2","time","Date","now","submissions","setSubmissions","useEffect","handleClose","uiActions","Dialog","open","onClose","fullWidth","DialogContent","map","s","idx","Grid","container","justify","className","md","TableContainer","component","Paper","Table","TableBody","Object","entries","filter","k","v","TableRow","TableCell","lodash","startCase","Divider","length","DialogActions","Button","onClick","color","theme","toolbar","padding","Typography","variant","Header","AppBar","position","Toolbar","analyticsLogger","store","next","actionWithTime","push","FormControlLabel","value","control","Radio","label","TextField","autoFocus","type","connect","hide","radioValue","setRadioValue","handleSubmit","RadioGroup","onChange","e","target","getRandomNumber","min","max","Math","ceil","floor","random","generateRandomListAndTarget","minSize","maxSize","size","result","list","activeIndices","blockedIndices","message","init","select","index","includes","i","showAll","reset","root","width","textAlign","height","fontSize","targetBox","backgroundColor","node","cursor","display","marginRight","numberContainer","verticalAlign","borderRadius","palette","primary","main","activeNumberContainer","border","blockedNumberContainer","targetNumberContainer","number","visibility","top","left","transform","activeNumber","indexContainer","bottom","activeIndexContainer","Experiment","experiment","found","indexOf","utils","sort","b","direction","item","Alert","severity","icon","handleSelect","clsx","spacing","alignItems","disabled","paddingRight","overflowY","borderRight","Instructions","xs","BinarySearch","Home","activeIndex","LinearSearch","RandomSearchWithReplacement","background","paper","tab","maxWidth","tabContainer","TabPanel","RandomSearchWithoutReplacement","TabBar","TabContext","TabList","event","newValue","Tab","App","createMuiTheme","secondary","typography","button","textTransform","configureStore","reducer","randomSearchWithReplacement","randomSearchWithoutReplacement","linearSearch","binarySearch","middleware","getDefaultMiddleware","concat","ReactDOM","render","document","querySelector"],"mappings":"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","file":"app.7eecf307.js","sourcesContent":["import axios from \"axios\";\nimport { v4 as uuid } from \"uuid\";\n\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL,\n});\n\nconst getUserId = () => {\n  let id = localStorage.getItem(\"user_id\");\n  if (id === null) {\n    id = uuid();\n    localStorage.setItem(\"user_id\", id);\n  }\n  return id;\n};\n\napi.interceptors.request.use((request) => {\n  request.headers[\"X-USER-ID\"] = getUserId();\n  return request;\n});\n\nexport const submit = async (experimentKey, actionLog) => {\n  await api.post(\"/submit\", {\n    key: experimentKey,\n    log: actionLog,\n  });\n};\n\nexport const fetch = async (experimentKey) => {\n  const response = await api.get(\"/fetch\", {\n    params: {\n      key: experimentKey,\n    },\n  });\n  return response.data;\n};\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst slice = createSlice({\n  name: \"ui\",\n  initialState: {\n    selectedTab: \"home\",\n    showSubmitModal: false,\n    showAnalyticsModal: false,\n  },\n  reducers: {\n    setSelectedTab: (state, action) => {\n      const { tabKey } = action.payload;\n      state.selectedTab = tabKey;\n    },\n    setShowSubmitModal: (state, action) => {\n      state.showSubmitModal = action.payload;\n    },\n    setShowAnalyticsModal: (state, action) => {\n      state.showAnalyticsModal = action.payload;\n    },\n  },\n});\n\nexport const actions = slice.actions;\nexport default slice.reducer;\n","import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  makeStyles,\n  TableContainer,\n  Paper,\n  Table,\n  TableBody,\n  TableRow,\n  TableCell,\n  Grid,\n  Divider,\n} from \"@material-ui/core\";\nimport lodash from \"lodash\";\n\nimport * as api from \"../api\";\nimport { actions as uiActions } from \"../store/slices/ui\";\n\nconst useStyles = makeStyles({\n  divider: {\n    margin: \"20px 0\",\n  },\n  submissionTitle: {\n    marginBottom: \"20px\",\n  },\n});\n\nconst Analytics = (props) => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  const experimentKey = useSelector((state) => state.ui.selectedTab);\n  const isOpen = useSelector((state) => state.ui.showAnalyticsModal);\n  const [submissions, setSubmissions] = useState([\n    { k1: \"v1\", k2: \"v2\", time: Date.now() },\n  ]);\n\n  useEffect(() => {\n    (async () => {\n      const data = await api.fetch(experimentKey);\n      setSubmissions(data);\n    })();\n  }, [isOpen]);\n\n  const handleClose = () => {\n    dispatch(uiActions.setShowAnalyticsModal(false));\n  };\n\n  return (\n    <Dialog open={isOpen} onClose={handleClose} fullWidth>\n      <DialogTitle>Analytics</DialogTitle>\n      <DialogContent>\n        {submissions.map((s, idx) => (\n          <>\n            <Grid\n              container\n              justify=\"space-between\"\n              className={classes.submissionTitle}\n            >\n              <Grid md={6}>Submission #{idx + 1}</Grid>\n              <Grid>{s.time}</Grid>\n            </Grid>\n            <TableContainer component={Paper}>\n              <Table>\n                <TableBody>\n                  {Object.entries(s)\n                    .filter(([k, v]) => k !== \"time\")\n                    .map(([k, v]) => (\n                      <TableRow>\n                        <TableCell>{lodash.startCase(k)}</TableCell>\n                        <TableCell>{v}</TableCell>\n                      </TableRow>\n                    ))}\n                </TableBody>\n              </Table>\n            </TableContainer>\n            <Divider className={classes.divider} />\n          </>\n        ))}\n        {submissions.length === 0 && <p>No submissions found</p>}\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={handleClose} color=\"primary\">\n          Close\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default Analytics;\n","import React from \"react\";\nimport { AppBar, makeStyles, Toolbar, Typography } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  toolbar: {\n    padding: \"12px 24px\",\n  },\n}));\n\nconst Header = () => {\n  const classes = useStyles();\n  return (\n    <AppBar position=\"relative\">\n      <Toolbar className={classes.toolbar}>\n        <Typography variant=\"h6\">Search</Typography>\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nexport default Header;\n","export const actionLog = [];\n\nexport const analyticsLogger = (store) => (next) => (action) => {\n  const actionWithTime = {\n    ...action,\n    time: Date.now(),\n  };\n  actionLog.push(actionWithTime);\n  next(action);\n};\n","import React, { useEffect, useState } from \"react\";\nimport { connect, useSelector } from \"react-redux\";\nimport {\n  FormControlLabel,\n  Radio,\n  RadioGroup,\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  TextField,\n} from \"@material-ui/core\";\n\nimport * as api from \"../api\";\nimport { actions as uiActions } from \"../store/slices/ui\";\nimport { actionLog } from \"../store/middleware/analytics\";\n\nconst SubmitAnswer = (props) => {\n  const experimentKey = useSelector((state) => state.ui.selectedTab);\n  const [radioValue, setRadioValue] = useState(\"\");\n\n  useEffect(() => {\n    setRadioValue(\"\");\n  }, [props.isOpen]);\n\n  const handleClose = () => {\n    props.hide();\n  };\n\n  const handleSubmit = async () => {\n    await api.submit(experimentKey, actionLog);\n    handleClose();\n  };\n\n  return (\n    <Dialog open={props.isOpen} onClose={handleClose} fullWidth>\n      <DialogTitle>Submit Answer</DialogTitle>\n      <DialogContent>\n        <RadioGroup\n          value={radioValue}\n          onChange={(e) => setRadioValue(e.target.value)}\n        >\n          <FormControlLabel\n            value=\"found\"\n            control={<Radio />}\n            label=\"Search target found\"\n          />\n          <FormControlLabel\n            value=\"notFound\"\n            control={<Radio />}\n            label=\"Search target not found\"\n          />\n        </RadioGroup>\n        {radioValue === \"found\" && (\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            id=\"name\"\n            label=\"Index of search target\"\n            type=\"email\"\n            fullWidth\n          />\n        )}\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={handleClose} color=\"primary\">\n          Cancel\n        </Button>\n        <Button onClick={handleSubmit} color=\"primary\">\n          Submit\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    isOpen: state.ui.showSubmitModal,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    hide: () => dispatch(uiActions.setShowSubmitModal(false)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SubmitAnswer);\n","const getRandomNumber = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nexport const generateRandomListAndTarget = (minSize = 3, maxSize = 7) => {\n  const size = getRandomNumber(minSize, maxSize);\n  const limit = 100;\n  const result = [];\n  while (result.length < size) {\n    result.push(getRandomNumber(1, limit));\n  }\n  const target = result[getRandomNumber(1, result.length) - 1];\n  return [result, target];\n};\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport * as utils from \"../../utils\";\n\nconst slice = createSlice({\n  name: \"binarySearch\",\n  initialState: {\n    list: [],\n    target: 0,\n    activeIndices: [],\n    blockedIndices: [],\n    message: \"\",\n  },\n  reducers: {\n    init: (state, action) => {\n      const { list, target } = action.payload;\n      state.list = list;\n      state.target = target;\n      state.activeIndices = [];\n      state.blockedIndices = [];\n      state.message = `You need to search for the number ${state.target} in the given list of numbers`;\n    },\n    select: (state, action) => {\n      const index = action.payload;\n      if (\n        state.activeIndices.includes(index) ||\n        state.blockedIndices.includes(index)\n      ) {\n        return;\n      }\n      state.activeIndices.push(index);\n      if (state.list[index] < state.target) {\n        state.message = `The item at index ${index} has number ${state.list[index]}.\n        It is less than ${state.target} (Search Target).\n        search number in Right sublist.`;\n        for (let i = 0; i < index; i++) {\n          if (state.activeIndices.includes(i)) {\n            continue;\n          }\n          state.blockedIndices.push(i);\n        }\n      } else if (state.list[index] > state.target) {\n        state.message = `The item at index ${index} has number ${state.list[index]}.\n        It is greater than ${state.target} (Search Target).\n        search number in Left sublist.`;\n        for (let i = index + 1; i < state.list.length; i++) {\n          if (state.activeIndices.includes(i)) {\n            continue;\n          }\n          state.blockedIndices.push(i);\n        }\n      } else {\n        for (let i = 0; i < state.list.length; i++) {\n          if (state.activeIndices.includes(i)) {\n            continue;\n          }\n          state.blockedIndices.push(i);\n        }\n        state.message = `Search Target found at index ${index} of the List.`;\n      }\n    },\n    showAll: (state, action) => {\n      state.blockedIndices = [];\n      state.activeIndices = [];\n      for (let i = 0; i < state.list.length; i++) {\n        state.activeIndices.push(i);\n      }\n    },\n    reset: (state, action) => {\n      state.activeIndices = [];\n      state.blockedIndices = [];\n      state.message = `You need to search for the number ${state.target} in the given list of numbers`;\n    },\n  },\n});\n\nexport const actions = slice.actions;\nexport default slice.reducer;\n","import { Button, Grid, makeStyles } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport React, { useEffect } from \"react\";\nimport { connect, useDispatch, useSelector } from \"react-redux\";\nimport clsx from \"clsx\";\nimport * as api from \"../../api\";\nimport { actionLog } from \"../../store/middleware/analytics\";\n\nimport { actions } from \"../../store/slices/binarySearch\";\nimport { actions as uiActions } from \"../../store/slices/ui\";\nimport * as utils from \"../../utils\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    padding: \"0px 20px\",\n    width: \"100%\",\n    textAlign: \"center\",\n    height: \"100%\",\n  },\n  message: {\n    margin: \"0 auto\",\n    width: \"70%\",\n    fontSize: \"20px\",\n  },\n  targetBox: {\n    margin: \"0 auto\",\n    padding: \"15px 0\",\n    width: \"200px\",\n    fontSize: \"20px\",\n    backgroundColor: \"rgb(213, 250, 252)\",\n  },\n  list: {\n    marginBottom: \"20%\",\n    width: \"100%\",\n  },\n  node: {\n    cursor: \"pointer\",\n    display: \"inline-block\",\n    textAlign: \"center\",\n    position: \"relative\",\n    marginRight: \"25px\",\n  },\n  numberContainer: {\n    position: \"relative\",\n    display: \"inline-block\",\n    width: \"90px\",\n    height: \"90px\",\n    textAlign: \"center\",\n    verticalAlign: \"center\",\n    borderRadius: \"100%\",\n    backgroundColor: theme.palette.primary.main,\n  },\n  activeNumberContainer: {\n    border: \"3px solid black\",\n    width: \"84px\",\n    height: \"84px\",\n    backgroundColor: \"rgb(243, 131, 106)\",\n  },\n  blockedNumberContainer: {\n    backgroundColor: \"rgb(243, 131, 106)\",\n  },\n  targetNumberContainer: {\n    backgroundColor: \"rgb(174, 213, 129)\",\n  },\n  number: {\n    visibility: \"hidden\",\n    position: \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    transform: \"translate(-50%, -50%)\",\n    fontSize: \"30px\",\n  },\n  activeNumber: {\n    visibility: \"visible\",\n  },\n  indexContainer: {\n    borderRadius: \"100%\",\n    width: \"40px\",\n    height: \"40px\",\n    position: \"absolute\",\n    left: \"50%\",\n    transform: \"translateX(-50%)\",\n    bottom: \"-60px\",\n    textAlign: \"center\",\n  },\n  activeIndexContainer: {\n    border: \"3px solid black\",\n  },\n  index: {\n    padding: \"10px\",\n  },\n}));\n\nconst Experiment = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const experimentKey = useSelector((state) => state.ui.selectedTab);\n  const experiment = useSelector((state) => state[experimentKey]);\n\n  const found = experiment.activeIndices.includes(\n    experiment.list.indexOf(experiment.target)\n  );\n\n  useEffect(() => {\n    const data = utils.generateRandomListAndTarget(5);\n    dispatch(\n      actions.init({\n        list: data[0].sort((a, b) => a - b),\n        target: data[1],\n      })\n    );\n  }, [experimentKey]);\n\n  const handleSelect = (index) => {\n    dispatch(actions.select(index));\n  };\n\n  const handleShowAll = () => {\n    dispatch(actions.showAll());\n  };\n\n  const handleAnalytics = () => {\n    dispatch(uiActions.setShowAnalyticsModal(true));\n  };\n\n  const handleReset = () => {\n    dispatch(actions.reset());\n  };\n\n  const handleSubmit = async () => {\n    await api.submit(experimentKey, actionLog);\n  };\n\n  return (\n    <Grid\n      container\n      direction=\"column\"\n      className={classes.root}\n      justify=\"space-between\"\n    >\n      <Grid item>\n        <Alert\n          className={classes.message}\n          variant=\"filled\"\n          severity=\"warning\"\n          icon={<></>}\n        >\n          {experiment.message}\n        </Alert>\n      </Grid>\n      <Grid item>\n        <div className={classes.targetBox}>\n          Search Target: {experiment.target}\n        </div>\n      </Grid>\n      <Grid item container>\n        <div className={classes.list}>\n          {experiment.list.map((number, index) => (\n            <div\n              key={index}\n              className={classes.node}\n              onClick={() => handleSelect(index)}\n            >\n              <div\n                className={clsx(\n                  classes.numberContainer,\n                  experiment.activeIndices.includes(index) &&\n                    classes.activeNumberContainer,\n                  experiment.blockedIndices.includes(index) &&\n                    classes.blockedNumberContainer,\n                  experiment.activeIndices.includes(index) &&\n                    number === experiment.target &&\n                    classes.targetNumberContainer\n                )}\n              >\n                <span\n                  className={clsx(\n                    classes.number,\n                    experiment.activeIndices.includes(index) &&\n                      classes.activeNumber\n                  )}\n                >\n                  {number}\n                </span>\n              </div>\n              <div\n                className={clsx(\n                  classes.indexContainer,\n                  experiment.activeIndices.includes(index) &&\n                    classes.activeIndexContainer\n                )}\n              >\n                <div className={classes.index}>{index}</div>\n              </div>\n            </div>\n          ))}\n        </div>\n        <Grid container justify=\"space-between\">\n          <Grid item md={9} spacing={2} container alignItems=\"center\">\n            <Grid item>\n              <Button variant=\"contained\" onClick={handleAnalytics}>\n                Analytics\n              </Button>\n            </Grid>\n            <Grid item>\n              <Button\n                color=\"primary\"\n                variant=\"contained\"\n                onClick={handleShowAll}\n                disabled={!found}\n              >\n                Show All\n              </Button>\n            </Grid>\n            <Grid item>\n              {found ? \"Target found, See all hidden numbers to verify.\" : \"\"}\n            </Grid>\n          </Grid>\n          <Grid item md={3} container spacing={2} direction=\"row-reverse\">\n            <Grid item>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={handleSubmit}\n              >\n                Submit\n              </Button>\n            </Grid>\n            <Grid item>\n              <Button variant=\"contained\" onClick={handleReset}>\n                Reset\n              </Button>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Experiment;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core\";\n\nconst useStyles = makeStyles({\n  root: {\n    paddingRight: \"20px\",\n    overflowY: \"scroll\",\n    borderRight: \"1px solid black\",\n  },\n});\n\nconst Instructions = () => {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <div>\n        <h3>Objective</h3>\n        <p>\n          Search for the target element in the sorted/ordered list, which might\n          be present. To search, use binary search strategy.\n        </p>\n      </div>\n      <div>\n        <h3>Experiment Setup</h3>\n        <p>\n          The Binary Search experiment consists of a list of numbers which are\n          hidden. The selectable items are in \"GREY\". You can select atmost\n          log(N) items from the list in succession. At the end of the process,\n          you will be able to verify the process using the \"Show All\" control\n          button.\n        </p>\n        <p>\n          On clicking one item, the selectable array will be changed according\n          to the chosen index, associated number will be shown. The elements\n          Left/Right to the chosen index will become non selectable. Non\n          selectable items will be shown in \"RED\" and the background will\n          indicate whether the number is the search target.\n        </p>\n      </div>\n      <div>\n        <h3>Procedure</h3>\n        <p>Follow the given steps to perform the experiment.</p>\n        <p>Step 1: Select an item from the grey items.</p>\n        <p>\n          Step 2: Check if the number is the search Target.If not, then repeat\n          step 1 and 2 again.\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default Instructions;\n","import { Grid, makeStyles } from \"@material-ui/core\";\nimport React from \"react\";\nimport Experiment from \"./Experiment\";\nimport Instructions from \"./Instructions\";\n\nconst useStyles = makeStyles({\n  root: {\n    height: \"100%\",\n  },\n});\n\nconst BinarySearch = () => {\n  const classes = useStyles();\n  return (\n    <Grid container className={classes.root}>\n      <Grid item xs={4} container>\n        <Instructions />\n      </Grid>\n      <Grid item xs={8}>\n        <Experiment />\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default BinarySearch;\n","import { makeStyles } from \"@material-ui/core\";\nimport React from \"react\";\n\nconst useStyles = makeStyles({\n  root: {\n    padding: \"16px 160px\",\n  },\n});\n\nconst Home = () => {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <div>\n        <h1>Introduction</h1>\n        <p>\n          Understanding algorithms, even simple ones, can be challenging.\n          Reading through the pseudo-code or actual code written in some\n          programming language and tracing the execution line-by-line makes it\n          difficult to grasp the core concepts of the algorithm.\n        </p>\n        <p>\n          Therefore, we are presenting an alternate way to learn algorithms.\n          Using the example of Search, we will demonstrate a systematic way of\n          learning algorithms using transition systems.\n        </p>\n        <p>\n          The Binary Search algorithm is introduced gradually through four\n          different experiments. Each experiment introduces just one new\n          concept, and lets you interactively learn that concept while\n          performing the given task. By the time you reach the final stage, you\n          will be presented with the final algorithm, which you can step through\n          at your own pace, visualising each every step involved.\n        </p>\n      </div>\n      <div>\n        <h1>Interactive Abstract Machines for Search</h1>\n        <ol>\n          <li>Random Search With Replacement</li>\n          <li>Random Search Without Replacement</li>\n          <li>Linear Search</li>\n          <li>Binary Search</li>\n        </ol>\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst slice = createSlice({\n  name: \"linearSearch\",\n  initialState: {\n    list: [],\n    target: 0,\n    activeIndex: -1,\n    message: \"\",\n  },\n  reducers: {\n    init: (state, action) => {\n      const { list, target } = action.payload;\n      state.list = list;\n      state.target = target;\n      state.activeIndex = -1;\n      state.message = `You need to search for the number ${state.target} in the given list of numbers`;\n    },\n    next: (state, action) => {\n      const index = state.activeIndex + 1;\n      state.activeIndex = index;\n      if (state.list[index] !== state.target) {\n        state.message = `The item at index ${index} has number ${state.list[index]}.\n        It does not match the search target of ${state.target}.`;\n      } else {\n        state.message = `Search Target found at index ${index} of the List.`;\n      }\n    },\n    reset: (state, action) => {\n      state.activeIndex = -1;\n      state.message = `You need to search for the number ${state.target} in the given list of numbers`;\n    },\n  },\n});\n\nexport const actions = slice.actions;\nexport default slice.reducer;\n","import { Button, Grid, makeStyles } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport React, { useEffect } from \"react\";\nimport { connect, useDispatch, useSelector } from \"react-redux\";\nimport clsx from \"clsx\";\n\nimport { actions } from \"../../store/slices/linearSearch\";\nimport * as utils from \"../../utils\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    padding: \"0px 20px\",\n    width: \"100%\",\n    textAlign: \"center\",\n    height: \"100%\",\n  },\n  message: {\n    margin: \"0 auto\",\n    width: \"70%\",\n    fontSize: \"20px\",\n  },\n  targetBox: {\n    margin: \"0 auto\",\n    padding: \"15px 0\",\n    width: \"200px\",\n    fontSize: \"20px\",\n    backgroundColor: \"rgb(213, 250, 252)\",\n  },\n  list: {\n    marginBottom: \"20%\",\n    width: \"100%\",\n  },\n  node: {\n    cursor: \"pointer\",\n    display: \"inline-block\",\n    textAlign: \"center\",\n    position: \"relative\",\n    marginRight: \"25px\",\n  },\n  numberContainer: {\n    position: \"relative\",\n    display: \"inline-block\",\n    width: \"90px\",\n    height: \"90px\",\n    textAlign: \"center\",\n    verticalAlign: \"center\",\n    borderRadius: \"100%\",\n    backgroundColor: theme.palette.primary.main,\n  },\n  activeNumberContainer: {\n    border: \"3px solid black\",\n    width: \"84px\",\n    height: \"84px\",\n    backgroundColor: \"rgb(243, 131, 106)\",\n  },\n  targetNumberContainer: {\n    backgroundColor: \"rgb(174, 213, 129)\",\n  },\n  number: {\n    visibility: \"hidden\",\n    position: \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    transform: \"translate(-50%, -50%)\",\n    fontSize: \"30px\",\n  },\n  activeNumber: {\n    visibility: \"visible\",\n  },\n  indexContainer: {\n    borderRadius: \"100%\",\n    width: \"40px\",\n    height: \"40px\",\n    position: \"absolute\",\n    left: \"50%\",\n    transform: \"translateX(-50%)\",\n    bottom: \"-60px\",\n    textAlign: \"center\",\n  },\n  activeIndexContainer: {\n    border: \"3px solid black\",\n  },\n  index: {\n    padding: \"10px\",\n  },\n}));\n\nconst Experiment = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const experimentKey = useSelector((state) => state.ui.selectedTab);\n  const experiment = useSelector((state) => state[experimentKey]);\n\n  const found =\n    experiment.activeIndex >= 0 &&\n    experiment.list[experiment.activeIndex] === experiment.target;\n\n  useEffect(() => {\n    const data = utils.generateRandomListAndTarget();\n    dispatch(\n      actions.init({\n        list: data[0],\n        target: data[1],\n      })\n    );\n  }, [experimentKey]);\n\n  const handleNext = () => {\n    dispatch(actions.next());\n  };\n\n  const handleReset = () => {\n    dispatch(actions.reset());\n  };\n\n  return (\n    <Grid\n      container\n      direction=\"column\"\n      className={classes.root}\n      justify=\"space-between\"\n    >\n      <Grid item>\n        <Alert\n          className={classes.message}\n          variant=\"filled\"\n          severity=\"warning\"\n          icon={<></>}\n        >\n          {experiment.message}\n        </Alert>\n      </Grid>\n      <Grid item>\n        <div className={classes.targetBox}>\n          Search Target: {experiment.target}\n        </div>\n      </Grid>\n      <Grid item container>\n        <div className={classes.list}>\n          {experiment.list.map((number, index) => (\n            <div key={index} className={classes.node}>\n              <div\n                className={clsx(\n                  classes.numberContainer,\n                  index <= experiment.activeIndex &&\n                    classes.activeNumberContainer,\n                  index <= experiment.activeIndex &&\n                    number === experiment.target &&\n                    classes.targetNumberContainer\n                )}\n              >\n                <span\n                  className={clsx(\n                    classes.number,\n                    index <= experiment.activeIndex && classes.activeNumber\n                  )}\n                >\n                  {number}\n                </span>\n              </div>\n              <div\n                className={clsx(\n                  classes.indexContainer,\n                  index <= experiment.activeIndex &&\n                    classes.activeIndexContainer\n                )}\n              >\n                <div className={classes.index}>{index}</div>\n              </div>\n            </div>\n          ))}\n        </div>\n        <Grid container>\n          <Grid item xs={6} container alignItems=\"center\" spacing={3}>\n            <Grid item>\n              <Button\n                color=\"primary\"\n                variant=\"contained\"\n                onClick={handleNext}\n                disabled={\n                  experiment.activeIndex === experiment.list.length - 1 || found\n                }\n              >\n                Increment\n              </Button>\n            </Grid>\n            <Grid item>\n              {found\n                ? \"Target element already found, no need to iterate more\"\n                : \"Click Increment to scan next item.\"}\n            </Grid>\n          </Grid>\n          <Grid item xs={6} container spacing={2} direction=\"row-reverse\">\n            <Grid item>\n              <Button variant=\"contained\" onClick={handleReset}>\n                Reset\n              </Button>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Experiment;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core\";\n\nconst useStyles = makeStyles({\n  root: {\n    paddingRight: \"20px\",\n    overflowY: \"scroll\",\n    borderRight: \"1px solid black\",\n  },\n});\n\nconst Instructions = () => {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <div>\n        <h3>Objective</h3>\n        <p>\n          Search for the target element in the list, which might be present. To\n          search, linearly scan items from the list.\n        </p>\n      </div>\n      <div>\n        <h3>Experiment Setup</h3>\n        <p>\n          The Linear Search experiment consists of a list of numbers which are\n          hidden. The 'Increment' control allows you to iterate through the\n          list, starting from index 0 going upto the last element. You can scan\n          all the items in succession.\n        </p>\n        <p>\n          On clicking increment once, the index will be incremented, associated\n          number will be shown, and the background will indicate whether the\n          number is the search target\n        </p>\n      </div>\n      <div>\n        <h3>Procedure</h3>\n        <p>Follow the given steps to perform the experiment.</p>\n        <p>Step 1: Click Increment, to visit the leftmost unknown item.</p>\n        <p>\n          Step 2: Check if the number is the search Target.If not, then repeat\n          step 1 and 2 again.\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default Instructions;\n","import { Grid, makeStyles } from \"@material-ui/core\";\nimport React from \"react\";\nimport Experiment from \"./Experiment\";\nimport Instructions from \"./Instructions\";\n\nconst useStyles = makeStyles({\n  root: {\n    height: \"100%\",\n  },\n});\n\nconst LinearSearch = () => {\n  const classes = useStyles();\n  return (\n    <Grid container className={classes.root}>\n      <Grid item xs={4} container>\n        <Instructions />\n      </Grid>\n      <Grid item xs={8}>\n        <Experiment />\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default LinearSearch;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst slice = createSlice({\n  name: \"randomSearchWithoutReplacement\",\n  initialState: {\n    list: [],\n    target: 0,\n    activeIndices: [],\n    message: \"\",\n  },\n  reducers: {\n    init: (state, action) => {\n      const { list, target } = action.payload;\n      state.list = list;\n      state.target = target;\n      state.activeIndices = [];\n      state.message = `You need to search for the number ${state.target} in the given list of numbers`;\n    },\n    select: (state, action) => {\n      const index = action.payload;\n      if (state.activeIndices.includes(index)) {\n        state.message = `The item at index ${index} has number ${state.list[index]}. It has already been selected.`;\n        return;\n      }\n      state.activeIndices.push(index);\n      if (state.list[index] !== state.target) {\n        state.message = `The item at index ${index} has number ${state.list[index]}.\n        It does not match the search target of ${state.target}.\n        Please search other indices.`;\n      } else {\n        state.message = `Search Target found at index ${index} of the List.`;\n      }\n    },\n    reset: (state, action) => {\n      state.activeIndices = [];\n      state.message = `You need to search for the number ${state.target} in the given list of numbers`;\n    },\n  },\n});\n\nexport const actions = slice.actions;\nexport default slice.reducer;\n","import { Button, Grid, makeStyles } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport React, { useEffect } from \"react\";\nimport { connect, useDispatch, useSelector } from \"react-redux\";\nimport clsx from \"clsx\";\nimport * as api from \"../../api\";\nimport { actionLog } from \"../../store/middleware/analytics\";\n\nimport { actions } from \"../../store/slices/randomSearchWithoutReplacement\";\nimport { actions as uiActions } from \"../../store/slices/ui\";\nimport * as utils from \"../../utils\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    padding: \"0px 20px\",\n    width: \"100%\",\n    textAlign: \"center\",\n    height: \"100%\",\n  },\n  message: {\n    margin: \"0 auto\",\n    width: \"70%\",\n    fontSize: \"20px\",\n  },\n  targetBox: {\n    margin: \"0 auto\",\n    padding: \"15px 0\",\n    width: \"200px\",\n    fontSize: \"20px\",\n    backgroundColor: \"rgb(213, 250, 252)\",\n  },\n  list: {\n    marginBottom: \"20%\",\n    width: \"100%\",\n  },\n  node: {\n    cursor: \"pointer\",\n    display: \"inline-block\",\n    textAlign: \"center\",\n    position: \"relative\",\n    marginRight: \"25px\",\n  },\n  numberContainer: {\n    position: \"relative\",\n    display: \"inline-block\",\n    width: \"90px\",\n    height: \"90px\",\n    textAlign: \"center\",\n    verticalAlign: \"center\",\n    borderRadius: \"100%\",\n    backgroundColor: theme.palette.primary.main,\n  },\n  activeNumberContainer: {\n    border: \"3px solid black\",\n    width: \"84px\",\n    height: \"84px\",\n    backgroundColor: \"rgb(243, 131, 106)\",\n  },\n  targetNumberContainer: {\n    backgroundColor: \"rgb(174, 213, 129)\",\n  },\n  number: {\n    visibility: \"hidden\",\n    position: \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    transform: \"translate(-50%, -50%)\",\n    fontSize: \"30px\",\n  },\n  activeNumber: {\n    visibility: \"visible\",\n  },\n  indexContainer: {\n    borderRadius: \"100%\",\n    width: \"40px\",\n    height: \"40px\",\n    position: \"absolute\",\n    left: \"50%\",\n    transform: \"translateX(-50%)\",\n    bottom: \"-60px\",\n    textAlign: \"center\",\n  },\n  activeIndexContainer: {\n    border: \"3px solid black\",\n  },\n  index: {\n    padding: \"10px\",\n  },\n}));\n\nconst Experiment = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const experimentKey = useSelector((state) => state.ui.selectedTab);\n  const experiment = useSelector((state) => state[experimentKey]);\n\n  useEffect(() => {\n    const data = utils.generateRandomListAndTarget();\n    dispatch(\n      actions.init({\n        list: data[0],\n        target: data[1],\n      })\n    );\n  }, [experimentKey]);\n\n  const handleSelect = (index) => {\n    dispatch(actions.select(index));\n  };\n\n  const handleAnalytics = () => {\n    dispatch(uiActions.setShowAnalyticsModal(true));\n  };\n\n  const handleReset = () => {\n    dispatch(actions.reset());\n  };\n\n  const handleSubmit = async () => {\n    await api.submit(experimentKey, actionLog);\n  };\n\n  return (\n    <Grid\n      container\n      direction=\"column\"\n      className={classes.root}\n      justify=\"space-between\"\n    >\n      <Grid item>\n        <Alert\n          className={classes.message}\n          variant=\"filled\"\n          severity=\"warning\"\n          icon={<></>}\n        >\n          {experiment.message}\n        </Alert>\n      </Grid>\n      <Grid item>\n        <div className={classes.targetBox}>\n          Search Target: {experiment.target}\n        </div>\n      </Grid>\n      <Grid item container>\n        <div className={classes.list}>\n          {experiment.list.map((number, index) => (\n            <div\n              key={index}\n              className={classes.node}\n              onClick={() => handleSelect(index)}\n            >\n              <div\n                className={clsx(\n                  classes.numberContainer,\n                  experiment.activeIndices.includes(index) &&\n                    classes.activeNumberContainer,\n                  experiment.activeIndices.includes(index) &&\n                    number === experiment.target &&\n                    classes.targetNumberContainer\n                )}\n              >\n                <span\n                  className={clsx(\n                    classes.number,\n                    experiment.activeIndices.includes(index) &&\n                      classes.activeNumber\n                  )}\n                >\n                  {number}\n                </span>\n              </div>\n              <div\n                className={clsx(\n                  classes.indexContainer,\n                  experiment.activeIndices.includes(index) &&\n                    classes.activeIndexContainer\n                )}\n              >\n                <div className={classes.index}>{index}</div>\n              </div>\n            </div>\n          ))}\n        </div>\n        <Grid container justify=\"space-between\">\n          <Grid item>\n            <Button variant=\"contained\" onClick={handleAnalytics}>\n              Analytics\n            </Button>\n          </Grid>\n          <Grid item md={6} container spacing={2} direction=\"row-reverse\">\n            <Grid item>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={handleSubmit}\n              >\n                Submit\n              </Button>\n            </Grid>\n            <Grid item>\n              <Button variant=\"contained\" onClick={handleReset}>\n                Reset\n              </Button>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Experiment;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core\";\n\nconst useStyles = makeStyles({\n  root: {\n    paddingRight: \"20px\",\n    overflowY: \"scroll\",\n    borderRight: \"1px solid black\",\n  },\n});\n\nconst Instructions = () => {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <div>\n        <h3>Objective</h3>\n        <p>\n          Search for the target element in the list, which might be present. To\n          search, randomly pick one item at a time from the list.\n        </p>\n      </div>\n      <div>\n        <h3>Experiment Setup</h3>\n        <p>\n          The Random Search Without Replacement experiment consists of a list of\n          numbers which are hidden. You can click on any item/index to select\n          it. You can not deselect any number. You can select all the items in\n          succession.\n        </p>\n        <p>\n          On selecting one item, you will be shown the number, and the\n          background will indicate whether the number is the search target\n        </p>\n      </div>\n      <div>\n        <h3>Procedure</h3>\n        <p>Follow the given steps to perform the experiment.</p>\n        <p>Step 1: Select an item randomly from grey items.</p>\n        <p>\n          Step 2: Check if the number is the search Target.If not, then repeat\n          step 1 and 2 again.\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default Instructions;\n","import { Grid, makeStyles } from \"@material-ui/core\";\nimport React from \"react\";\nimport Experiment from \"./Experiment\";\nimport Instructions from \"./Instructions\";\n\nconst useStyles = makeStyles({\n  root: {\n    height: \"100%\",\n  },\n});\n\nconst RandomSearchWithReplacement = () => {\n  const classes = useStyles();\n  return (\n    <Grid container className={classes.root}>\n      <Grid item xs={4} container>\n        <Instructions />\n      </Grid>\n      <Grid item xs={8}>\n        <Experiment />\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default RandomSearchWithReplacement;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst slice = createSlice({\n  name: \"randomSearchWithReplacement\",\n  initialState: {\n    list: [],\n    target: 0,\n    activeIndex: -1,\n    message: \"\",\n  },\n  reducers: {\n    init: (state, action) => {\n      const { list, target } = action.payload;\n      state.list = list;\n      state.target = target;\n      state.activeIndex = -1;\n      state.message = `You need to search for the number ${state.target} in the given list of numbers`;\n    },\n    select: (state, action) => {\n      const index = action.payload;\n      if (state.activeIndex === index) {\n        state.message = `The item at index ${index} has number ${state.list[index]}. It has already been selected.`;\n        return;\n      }\n      state.activeIndex = index;\n      if (state.list[index] !== state.target) {\n        state.message = `The item at index ${index} has number ${state.list[index]}.\n        It does not match the search target of ${state.target}.\n        Please search other indices.`;\n      } else {\n        state.message = `Search Target found at index ${index} of the List.`;\n      }\n    },\n    reset: (state, action) => {\n      state.activeIndex = -1;\n      state.message = `You need to search for the number ${state.target} in the given list of numbers`;\n    },\n  },\n});\n\nexport const actions = slice.actions;\nexport default slice.reducer;\n","import { Button, Grid, makeStyles } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport clsx from \"clsx\";\nimport * as api from \"../../api\";\n\nimport { actions } from \"../../store/slices/randomSearchWithReplacement\";\nimport { actions as uiActions } from \"../../store/slices/ui\";\nimport { actionLog } from \"../../store/middleware/analytics\";\nimport * as utils from \"../../utils\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    padding: \"0px 20px\",\n    width: \"100%\",\n    textAlign: \"center\",\n    height: \"100%\",\n  },\n  message: {\n    margin: \"0 auto\",\n    width: \"70%\",\n    fontSize: \"20px\",\n  },\n  targetBox: {\n    margin: \"0 auto\",\n    padding: \"15px 0\",\n    width: \"200px\",\n    fontSize: \"20px\",\n    backgroundColor: \"rgb(213, 250, 252)\",\n  },\n  list: {\n    marginBottom: \"20%\",\n    width: \"100%\",\n  },\n  node: {\n    cursor: \"pointer\",\n    display: \"inline-block\",\n    textAlign: \"center\",\n    position: \"relative\",\n    marginRight: \"25px\",\n  },\n  numberContainer: {\n    position: \"relative\",\n    display: \"inline-block\",\n    width: \"90px\",\n    height: \"90px\",\n    textAlign: \"center\",\n    verticalAlign: \"center\",\n    borderRadius: \"100%\",\n    backgroundColor: theme.palette.primary.main,\n  },\n  activeNumberContainer: {\n    border: \"3px solid black\",\n    width: \"84px\",\n    height: \"84px\",\n    backgroundColor: \"rgb(243, 131, 106)\",\n  },\n  targetNumberContainer: {\n    backgroundColor: \"rgb(174, 213, 129)\",\n  },\n  number: {\n    visibility: \"hidden\",\n    position: \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    transform: \"translate(-50%, -50%)\",\n    fontSize: \"30px\",\n  },\n  activeNumber: {\n    visibility: \"visible\",\n  },\n  indexContainer: {\n    borderRadius: \"100%\",\n    width: \"40px\",\n    height: \"40px\",\n    position: \"absolute\",\n    left: \"50%\",\n    transform: \"translateX(-50%)\",\n    bottom: \"-60px\",\n    textAlign: \"center\",\n  },\n  activeIndexContainer: {\n    border: \"3px solid black\",\n  },\n  index: {\n    padding: \"10px\",\n  },\n}));\n\nconst Experiment = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const experimentKey = useSelector((state) => state.ui.selectedTab);\n  const experiment = useSelector((state) => state[experimentKey]);\n\n  useEffect(() => {\n    const data = utils.generateRandomListAndTarget();\n    dispatch(\n      actions.init({\n        list: data[0],\n        target: data[1],\n      })\n    );\n  }, [experimentKey]);\n\n  const handleSelect = (index) => {\n    dispatch(actions.select(index));\n  };\n\n  const handleAnalytics = () => {\n    dispatch(uiActions.setShowAnalyticsModal(true));\n  };\n\n  const handleReset = () => {\n    dispatch(actions.reset());\n  };\n\n  const handleSubmit = async () => {\n    await api.submit(experimentKey, actionLog);\n  };\n\n  return (\n    <Grid\n      container\n      direction=\"column\"\n      className={classes.root}\n      justify=\"space-between\"\n    >\n      <Grid item>\n        <Alert\n          className={classes.message}\n          variant=\"filled\"\n          severity=\"warning\"\n          icon={<></>}\n        >\n          {experiment.message}\n        </Alert>\n      </Grid>\n      <Grid item>\n        <div className={classes.targetBox}>\n          Search Target: {experiment.target}\n        </div>\n      </Grid>\n      <Grid item container>\n        <div className={classes.list}>\n          {experiment.list.map((number, index) => (\n            <div\n              key={index}\n              className={classes.node}\n              onClick={() => handleSelect(index)}\n            >\n              <div\n                className={clsx(\n                  classes.numberContainer,\n                  index === experiment.activeIndex &&\n                    classes.activeNumberContainer,\n                  index === experiment.activeIndex &&\n                    number === experiment.target &&\n                    classes.targetNumberContainer\n                )}\n              >\n                <span\n                  className={clsx(\n                    classes.number,\n                    index === experiment.activeIndex && classes.activeNumber\n                  )}\n                >\n                  {number}\n                </span>\n              </div>\n              <div\n                className={clsx(\n                  classes.indexContainer,\n                  index === experiment.activeIndex &&\n                    classes.activeIndexContainer\n                )}\n              >\n                <div className={classes.index}>{index}</div>\n              </div>\n            </div>\n          ))}\n        </div>\n        <Grid container justify=\"space-between\">\n          <Grid item>\n            <Button variant=\"contained\" onClick={handleAnalytics}>\n              Analytics\n            </Button>\n          </Grid>\n          <Grid item md={6} container spacing={2} direction=\"row-reverse\">\n            <Grid item>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={handleSubmit}\n              >\n                Submit\n              </Button>\n            </Grid>\n            <Grid item>\n              <Button variant=\"contained\" onClick={handleReset}>\n                Reset\n              </Button>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Experiment;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core\";\n\nconst useStyles = makeStyles({\n  root: {\n    paddingRight: \"20px\",\n    overflowY: \"scroll\",\n    borderRight: \"1px solid black\",\n  },\n});\n\nconst Instructions = () => {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <div>\n        <h3>Objective</h3>\n        <p>\n          Search for the target element in the list, which might be present. To\n          search, randomly pick one item at a time from the list.\n        </p>\n      </div>\n      <div>\n        <h3>Experiment Setup</h3>\n        <p>\n          The Random Search With Replacement experiment consists of a list of\n          numbers which are hidden. You can click on any item/index/number to\n          select it. You can select at most one item at a time.\n        </p>\n        <p>\n          On selecting one item, you will be shown the number, and the\n          background will indicate whether the number is the search target\n        </p>\n      </div>\n      <div>\n        <h3>Procedure</h3>\n        <p>Follow the given steps to perform the experiment.</p>\n        <p>Step 1: Select an item randomly from grey items.</p>\n        <p>\n          Step 2: Check if the number is the search Target.If not, then repeat\n          step 1 and 2 again.\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default Instructions;\n","import { Grid, makeStyles } from \"@material-ui/core\";\nimport React, { useEffect } from \"react\";\nimport Experiment from \"./Experiment\";\nimport Instructions from \"./Instructions\";\n\nconst useStyles = makeStyles({\n  root: {\n    height: \"100%\",\n  },\n});\n\nconst RandomSearchWithReplacement = () => {\n  const classes = useStyles();\n  return (\n    <Grid container className={classes.root}>\n      <Grid item xs={4} container>\n        <Instructions />\n      </Grid>\n      <Grid item xs={8}>\n        <Experiment />\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default RandomSearchWithReplacement;\n","import React from \"react\";\nimport { AppBar, Tab, makeStyles } from \"@material-ui/core\";\nimport { TabContext, TabList, TabPanel } from \"@material-ui/lab\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport BinarySearch from \"../pages/BinarySearch\";\nimport Home from \"../pages/Home\";\nimport LinearSearch from \"../pages/LinearSearch\";\nimport RandomSearchWithoutReplacement from \"../pages/RandomSearchWithoutReplacement\";\nimport RandomSearchWithReplacement from \"../pages/RandomSearchWithReplacement\";\nimport { actions as uiActions } from \"../store/slices/ui\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    backgroundColor: theme.palette.background.paper,\n  },\n  tab: {\n    maxWidth: \"500px\",\n    \"&.Mui-selected\": {\n      color: \"black\",\n      backgroundColor: \"rgb(207, 216, 220)\",\n    },\n  },\n  tabContainer: {\n    height: \"calc(100% - (88px + 48px))\",\n    display: \"flex\",\n  },\n}));\n\nexport default function TabBar() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  const selectedTab = useSelector((state) => state.ui.selectedTab);\n\n  const setSelectedTab = (event, newValue) => {\n    dispatch(\n      uiActions.setSelectedTab({\n        tabKey: newValue,\n      })\n    );\n  };\n\n  return (\n    <TabContext value={selectedTab}>\n      <AppBar position=\"relative\" color=\"secondary\">\n        <TabList onChange={setSelectedTab}>\n          <Tab className={classes.tab} label=\"Home\" value=\"home\" />\n          <Tab\n            className={classes.tab}\n            label=\"Random Search With Replacement\"\n            value=\"randomSearchWithReplacement\"\n          />\n          <Tab\n            className={classes.tab}\n            label=\"Random Search Without Replacement\"\n            value=\"randomSearchWithoutReplacement\"\n          />\n          <Tab\n            className={classes.tab}\n            label=\"Linear Search\"\n            value=\"linearSearch\"\n          />\n          <Tab\n            className={classes.tab}\n            label=\"Binary Search\"\n            value=\"binarySearch\"\n          />\n        </TabList>\n      </AppBar>\n      <div className={classes.tabContainer}>\n        <TabPanel value=\"home\">\n          <Home />\n        </TabPanel>\n        <TabPanel value=\"randomSearchWithReplacement\">\n          <RandomSearchWithReplacement />\n        </TabPanel>\n        <TabPanel value=\"randomSearchWithoutReplacement\">\n          <RandomSearchWithoutReplacement />\n        </TabPanel>\n        <TabPanel value=\"linearSearch\">\n          <LinearSearch />\n        </TabPanel>\n        <TabPanel value=\"binarySearch\">\n          <BinarySearch />\n        </TabPanel>\n      </div>\n    </TabContext>\n  );\n}\n","import React from \"react\";\n\nimport \"./App.css\";\nimport Analytics from \"./components/Analytics\";\nimport Header from \"./components/Header\";\nimport SubmitAnswer from \"./components/SubmitAnswer\";\nimport TabBar from \"./components/TabBar\";\n\nconst App = () => {\n  return (\n    <>\n      <Header />\n      <TabBar />\n      <SubmitAnswer />\n      <Analytics />\n    </>\n  );\n};\n\nexport default App;\n","import { createMuiTheme } from \"@material-ui/core/styles\";\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: \"rgb(69, 90, 100)\",\n    },\n    secondary: {\n      main: \"rgb(120, 144, 156)\",\n    },\n  },\n  typography: {\n    button: {\n      textTransform: \"none\",\n    },\n  },\n});\n\nexport default theme;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport logger from \"redux-logger\";\n\nimport binarySearch from \"./slices/binarySearch\";\nimport linearSearch from \"./slices/linearSearch\";\nimport randomSearchWithoutReplacement from \"./slices/randomSearchWithoutReplacement\";\nimport randomSearchWithReplacement from \"./slices/randomSearchWithReplacement\";\nimport ui from \"./slices/ui\";\nimport { analyticsLogger } from \"./middleware/analytics\";\n\nexport default configureStore({\n  reducer: {\n    ui,\n    randomSearchWithReplacement,\n    randomSearchWithoutReplacement,\n    linearSearch,\n    binarySearch,\n  },\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware().concat(analyticsLogger),\n});\n","import { MuiThemeProvider } from \"@material-ui/core\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport theme from \"./theme\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router>\n      <MuiThemeProvider theme={theme}>\n        <App />\n      </MuiThemeProvider>\n    </Router>\n  </Provider>,\n  document.querySelector(\"#app\")\n);\n"],"sourceRoot":""}
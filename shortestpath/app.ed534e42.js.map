{"version":3,"sources":["webpack:///./src/store/slices/notifications/actions.js","webpack:///./src/store/slices/notifications/index.js","webpack:///./src/components/Notifier.js","webpack:///./src/utils.js","webpack:///./src/store/fixtures.js","webpack:///./src/store/slices/v1Graph.js","webpack:///./src/components/ColorCodes.js","webpack:///./src/components/CustomEdge/index.js","webpack:///./src/components/CustomNode/index.js","webpack:///./src/components/V1Graph/index.js","webpack:///./src/store/slices/v2Graph.js","webpack:///./src/components/V2Graph/index.js","webpack:///./src/store/slices/v3Graph.js","webpack:///./src/components/V3Graph/index.js","webpack:///./src/store/slices/ui.js","webpack:///./src/App.js","webpack:///./src/store/index.js","webpack:///./src/index.js"],"names":["ENQUEUE_SNACKBAR","CLOSE_SNACKBAR","REMOVE_SNACKBAR","enqueueSnackbar","notification","key","options","type","Date","getTime","Math","random","closeSnackbar","dismissAll","removeSnackbar","defaultState","items","displayed","Notifier","dispatch","useDispatch","notifications","useSelector","store","useSnackbar","removeDisplayed","id","filter","React","useEffect","forEach","message","dismissed","includes","onClose","event","reason","myKey","notificationsActions","onExited","processNode","node","position","split","x","y","Object","assign","processEdge","edge","arrowHeadType","isEdge","element","getNode","nodeId","graph","nodes","find","n","areNodesVisited","_","get","data","getNextNode","edges","parents","getParentNodes","target","map","source","getShortestPath","shortestPathLength","Infinity","shortestPathParentId","currentPathLength","Number","label","shortestPath","pentagon","parentId","sourceHandle","targetHandle","selectedGraph","fixtures","sourceNodeId","getInitialState","activeNodeId","destinationNodeId","v1Graph","createSlice","name","initialState","reducers","reset","state","action","setActiveNode","payload","clearActiveNode","visit","highlightPath","currentNodeId","parentNodeId","index","findIndex","isHighlighted","parentNode","clearHighlightedPath","entries","actions","pathLength","getState","variant","graphState","undefined","className","CustomEdge","sourceX","sourceY","sourcePosition","targetX","targetY","targetPosition","edgePath","getBezierPath","markerEnd","getMarkerEnd","markerEndId","style","clsx","d","dy","href","startOffset","textAnchor","CustomNode","activeGraphId","ui","v2Graph","v3Graph","isSource","isDestination","isVisited","Grid","md","ColorCodes","V1","elements","concat","prompt","graphActions","container","zoomOnDoubleClick","zoomOnScroll","paneMoveable","onLoad","f","fitView","onElementClick","nodesDraggable","nodesConnectable","nodeTypes","customNode","edgeTypes","customEdge","V2Graph","next","select","console","dir","JSON","stringify","V3Graph","isNextDisabled","Button","disabled","onClick","size","color","setActiveGraph","graphId","item","Typography","Tab","value","V1Graph","App","v1GraphActions","v2GraphActions","v3GraphActions","AppBar","Toolbar","justify","alignItems","Tabs","onChange","uiActions","configureStore","reducer","combineReducers","render","StylesProvider","injectFirst","anchorOrigin","vertical","horizontal","document","querySelector"],"mappings":"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","file":"app.ed534e42.js","sourcesContent":["export const ENQUEUE_SNACKBAR = \"ENQUEUE_SNACKBAR\";\nexport const CLOSE_SNACKBAR = \"CLOSE_SNACKBAR\";\nexport const REMOVE_SNACKBAR = \"REMOVE_SNACKBAR\";\n\nexport const enqueueSnackbar = (notification) => {\n  const key = notification.options && notification.options.key;\n\n  return {\n    type: ENQUEUE_SNACKBAR,\n    notification: {\n      ...notification,\n      key: key || new Date().getTime() + Math.random(),\n    },\n  };\n};\n\nexport const closeSnackbar = (key) => ({\n  type: CLOSE_SNACKBAR,\n  dismissAll: !key, // dismiss all if no key has been defined\n  key,\n});\n\nexport const removeSnackbar = (key) => ({\n  type: REMOVE_SNACKBAR,\n  key,\n});\n","import { ENQUEUE_SNACKBAR, CLOSE_SNACKBAR, REMOVE_SNACKBAR } from \"./actions\";\nexport * as actions from \"./actions\";\n\nconst defaultState = {\n  items: [],\n};\n\nexport default (state = defaultState, action) => {\n  switch (action.type) {\n    case ENQUEUE_SNACKBAR:\n      return {\n        ...state,\n        items: [\n          ...state.items,\n          {\n            key: action.key,\n            ...action.notification,\n          },\n        ],\n      };\n\n    case CLOSE_SNACKBAR:\n      return {\n        ...state,\n        items: state.items.map((notification) =>\n          action.dismissAll || notification.key === action.key\n            ? { ...notification, dismissed: true }\n            : { ...notification }\n        ),\n      };\n\n    case REMOVE_SNACKBAR:\n      return {\n        ...state,\n        items: state.items.filter(\n          (notification) => notification.key !== action.key\n        ),\n      };\n\n    default:\n      return state;\n  }\n};\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useSnackbar } from \"notistack\";\nimport { actions as notificationsActions } from \"../store/slices/notifications\";\n\nlet displayed = [];\n\nconst Notifier = () => {\n  const dispatch = useDispatch();\n  const notifications = useSelector((store) => store.notifications.items || []);\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n\n  const storeDisplayed = (id) => {\n    displayed = [...displayed, id];\n  };\n\n  const removeDisplayed = (id) => {\n    displayed = [...displayed.filter((key) => id !== key)];\n  };\n\n  React.useEffect(() => {\n    notifications.forEach(\n      ({ key, message, options = {}, dismissed = false }) => {\n        if (dismissed) {\n          // dismiss snackbar using notistack\n          closeSnackbar(key);\n          return;\n        }\n\n        // do nothing if snackbar is already displayed\n        if (displayed.includes(key)) return;\n\n        // display snackbar using notistack\n        enqueueSnackbar(message, {\n          key,\n          ...options,\n          onClose: (event, reason, myKey) => {\n            if (reason === 'clickaway') {\n              dispatch(notificationsActions.closeSnackbar(key));\n              removeDisplayed(key);\n            }\n            if (options.onClose) {\n              options.onClose(event, reason, myKey);\n            }\n          },\n          onExited: (event, myKey) => {\n            // remove this snackbar from redux store\n            dispatch(notificationsActions.removeSnackbar(myKey));\n            removeDisplayed(myKey);\n          },\n        });\n\n        // keep track of snackbars that we've displayed\n        storeDisplayed(key);\n      }\n    );\n  }, [notifications, closeSnackbar, enqueueSnackbar, dispatch]);\n\n  return null;\n};\n\nexport default Notifier;\n","import _ from \"lodash\";\n\nexport const processNode = (node) => {\n  const [x, y] = node.position.split(\",\");\n  return Object.assign({}, node, {\n    type: \"customNode\",\n    position: {\n      x,\n      y,\n    },\n  });\n};\n\nexport const processEdge = (edge) => {\n  return Object.assign({}, edge, {\n    type: \"customEdge\",\n    arrowHeadType: \"arrowclosed\",\n  });\n};\n\nexport const isEdge = (element) => element.id.includes(\"-\");\n\nexport const getNode = (nodeId, graph) =>\n  graph.nodes.find((n) => n.id === nodeId);\n\nexport const areNodesVisited = (nodes) => {\n  for (const node of nodes) {\n    if (_.get(node.data, \"shortestPath\", null) === null) {\n      return false;\n    }\n  }\n  return true;\n};\n\nexport const getNextNode = ({ nodes, edges }) => {\n  for (const node of nodes) {\n    if (_.get(node.data, \"shortestPath\", null) !== null) {\n      continue;\n    }\n    const parents = getParentNodes(node.id, { nodes, edges });\n    if (areNodesVisited(parents)) {\n      return node;\n    }\n  }\n  return null;\n};\n\nexport const getParentNodes = (nodeId, graph) =>\n  graph.edges\n    .filter((edge) => edge.target === nodeId)\n    .map((edge) => graph.nodes.find((node) => node.id === edge.source));\n\nexport const getShortestPath = (nodeId, graph) => {\n  let shortestPathLength = Infinity,\n    shortestPathParentId = -1;\n  const parents = getParentNodes(nodeId, graph);\n  for (const edge of graph.edges) {\n    if (edge.target === nodeId) {\n      const currentPathLength =\n        Number(edge.label) +\n        parents.find((node) => node.id === edge.source).data.shortestPath;\n      if (currentPathLength < shortestPathLength) {\n        shortestPathLength = currentPathLength;\n        shortestPathParentId = edge.source;\n      }\n    }\n  }\n  return [shortestPathLength, shortestPathParentId];\n};\n","export const square = {\n  nodes: [\n    {\n      id: \"s\",\n      position: \"0,0\",\n      data: {\n        shortestPath: 0,\n        parentId: \"0\",\n      },\n    },\n    {\n      id: \"a\",\n      position: \"100,0\",\n      data: {},\n    },\n    {\n      id: \"t\",\n      position: \"0,100\",\n      data: {},\n    },\n    {\n      id: \"b\",\n      position: \"100,100\",\n      data: {},\n    },\n    {\n      id: \"tx\",\n      position: \"-100,200\",\n      data: {},\n    },\n  ],\n  edges: [\n    {\n      id: \"es-a\",\n      source: \"s\",\n      target: \"a\",\n      sourceHandle: \"handle-right\",\n      targetHandle: \"handle-left\",\n      label: \"1\",\n      data: {},\n    },\n    {\n      id: \"es-t\",\n      source: \"s\",\n      target: \"t\",\n      sourceHandle: \"handle-bottom\",\n      targetHandle: \"handle-top\",\n      label: \"2\",\n      data: {},\n    },\n    {\n      id: \"ea-b\",\n      source: \"a\",\n      target: \"b\",\n      sourceHandle: \"handle-bottom\",\n      targetHandle: \"handle-top\",\n      label: \"1\",\n      data: {},\n    },\n    {\n      id: \"eb-t\",\n      source: \"b\",\n      target: \"t\",\n      sourceHandle: \"handle-left\",\n      targetHandle: \"handle-right\",\n      label: \"1\",\n      data: {},\n    },\n    {\n      id: \"et-tx\",\n      source: \"t\",\n      target: \"tx\",\n      sourceHandle: \"handle-bottom\",\n      targetHandle: \"handle-top\",\n      label: \"10\",\n      data: {},\n    },\n  ],\n};\n\nexport const pentagon = {\n  nodes: [\n    {\n      id: \"a\",\n      position: \"100,0\",\n      data: {\n        shortestPath: 0,\n        parentId: \"0\",\n      },\n    },\n    {\n      id: \"b\",\n      position: \"0,100\",\n      data: {},\n    },\n    {\n      id: \"c\",\n      position: \"200,100\",\n      data: {},\n    },\n    {\n      id: \"d\",\n      position: \"0,200\",\n      data: {},\n    },\n    {\n      id: \"e\",\n      position: \"200,200\",\n      data: {},\n    },\n  ],\n  edges: [\n    {\n      id: \"ea-b\",\n      source: \"a\",\n      target: \"b\",\n      sourceHandle: \"handle-left\",\n      targetHandle: \"handle-top\",\n      label: \"1\",\n      data: {},\n    },\n    {\n      id: \"ea-c\",\n      source: \"a\",\n      target: \"c\",\n      sourceHandle: \"handle-right\",\n      targetHandle: \"handle-top\",\n      label: \"2\",\n      data: {},\n    },\n    {\n      id: \"eb-d\",\n      source: \"b\",\n      target: \"d\",\n      sourceHandle: \"handle-bottom\",\n      targetHandle: \"handle-top\",\n      label: \"100\",\n      data: {},\n    },\n    {\n      id: \"ec-e\",\n      source: \"c\",\n      target: \"e\",\n      sourceHandle: \"handle-bottom\",\n      targetHandle: \"handle-top\",\n      label: \"1\",\n      data: {},\n    },\n    {\n      id: \"ed-e\",\n      source: \"d\",\n      target: \"e\",\n      sourceHandle: \"handle-right\",\n      targetHandle: \"handle-left\",\n      label: \"200\",\n      data: {},\n    },\n  ],\n};\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport { getNode, getParentNodes, getShortestPath } from \"../../utils\";\nimport { actions as notificationsActions } from \"../slices/notifications\";\nimport * as fixtures from \"../fixtures\";\n\nconst selectedGraph = {\n  ...fixtures.pentagon,\n  sourceNodeId: \"a\",\n};\n\nconst getInitialState = () => {\n  return {\n    ...selectedGraph,\n    activeNodeId: null,\n    destinationNodeId: null,\n  };\n};\n\nconst v1Graph = createSlice({\n  name: \"v1Graph\",\n  initialState: getInitialState(),\n  reducers: {\n    reset: (state, action) => {\n      return getInitialState();\n    },\n    setActiveNode: (state, action) => {\n      const { nodeId } = action.payload;\n      state.activeNodeId = nodeId;\n    },\n    clearActiveNode: (state, action) => {\n      state.activeNodeId = null;\n    },\n    visit: (state, action) => {\n      const { nodeId } = action.payload;\n      const node = getNode(nodeId, state);\n      const [shortestPath, parentId] = getShortestPath(nodeId, state);\n      node.data = { shortestPath, parentId };\n    },\n    highlightPath: (state, action) => {\n      let { nodeId: currentNodeId } = action.payload;\n      state.destinationNodeId = currentNodeId;\n      let currentNode = getNode(currentNodeId, state);\n      let parentNodeId = currentNode.data.parentId;\n      while (parentNodeId !== \"0\") {\n        const index = state.edges.findIndex(\n          (edge) =>\n            edge.source === parentNodeId && edge.target === currentNodeId\n        );\n        // console.log(\n        //   `found edge ${parentNodeId} -> ${currentNodeId} at ${index}`\n        // );\n        state.edges[index].data.isHighlighted = true;\n        const parentNode = getNode(parentNodeId, state);\n        currentNodeId = parentNodeId;\n        parentNodeId = parentNode.data.parentId;\n      }\n    },\n    clearHighlightedPath: (state, action) => {\n      for (const [index, edge] of state.edges.entries()) {\n        state.edges[index].data.isHighlighted = false;\n      }\n      state.destinationNodeId = null;\n    },\n  },\n});\n\nexport const actions = {\n  reset: () => (dispatch) => dispatch(v1Graph.actions.reset()),\n  submit:\n    ({ pathLength }) =>\n    (dispatch, getState) => {\n      if (pathLength === null) {\n        return dispatch(v1Graph.actions.clearActiveNode());\n      }\n      const state = getState().v1Graph;\n      const [shortestPath, parentId] = getShortestPath(\n        state.activeNodeId,\n        state\n      );\n      if (shortestPath !== Number(pathLength)) {\n        dispatch(\n          notificationsActions.enqueueSnackbar({\n            message: `Incorrect shortest path length`,\n            options: {\n              variant: \"error\",\n            },\n          })\n        );\n      } else {\n        dispatch(\n          v1Graph.actions.visit({\n            nodeId: state.activeNodeId,\n          })\n        );\n      }\n      return dispatch(v1Graph.actions.clearActiveNode());\n    },\n  select:\n    ({ nodeId }) =>\n    (dispatch, getState) => {\n      const { v1Graph: graphState } = getState();\n      dispatch(v1Graph.actions.clearHighlightedPath());\n      const node = getNode(nodeId, graphState);\n      if (node.data.shortestPath !== undefined) {\n        return dispatch(v1Graph.actions.highlightPath({ nodeId }));\n      }\n      const parents = getParentNodes(nodeId, graphState);\n      for (const parent of parents) {\n        if (parent.data.shortestPath === undefined) {\n          return dispatch(\n            notificationsActions.enqueueSnackbar({\n              message: `Node \"${node.id}\" has unvisited parents`,\n              options: {\n                variant: \"warning\",\n              },\n            })\n          );\n        }\n      }\n      dispatch(v1Graph.actions.setActiveNode({ nodeId }));\n      // dispatch(v1Graph.actions.highlightPath({ nodeId }));\n    },\n};\n\nexport default v1Graph.reducer;\n","import React from \"react\";\n\nexport default () => {\n  return (\n    <>\n      <p className=\"title\">Color Codes</p>\n      <p>\n        <div className=\"color-block-container\">\n          <span className=\"color-block green source\" /> Source Node\n        </div>\n        <div className=\"color-block-container\">\n          <span className=\"color-block blue\" /> Unvisited Node\n        </div>\n        <div className=\"color-block-container\">\n          <span className=\"color-block green\" /> Visited Node\n        </div>\n        <div className=\"color-block-container\">\n          <span className=\"color-block green destination\" /> Destination Node\n        </div>\n        <div className=\"color-block-container\">\n          <span className=\"color-block yellow\" /> Shortest Path Edge\n        </div>\n      </p>\n    </>\n  );\n};\n","import clsx from \"clsx\";\nimport React from \"react\";\nimport {\n  getBezierPath,\n  getMarkerEnd,\n  ReactFlowProvider,\n} from \"react-flow-renderer\";\n\nimport \"./index.css\";\n\nconst CustomEdge = (edge) => {\n  const { sourceX, sourceY, sourcePosition, targetX, targetY, targetPosition } =\n    edge;\n  const edgePath = getBezierPath({\n    sourceX,\n    sourceY,\n    sourcePosition,\n    targetX,\n    targetY,\n    targetPosition,\n  });\n  const markerEnd = getMarkerEnd(edge.arrowHeadType, edge.markerEndId);\n\n  return (\n    <ReactFlowProvider>\n      <path\n        id={edge.id}\n        style={edge.style}\n        className={clsx(\n          \"react-flow__edge-path\",\n          \"edge\",\n          edge.data.isHighlighted && \"highlighted\"\n        )}\n        d={edgePath}\n        markerEnd={markerEnd}\n      />\n      <text dy={-8}>\n        <textPath\n          href={`#${edge.id}`}\n          startOffset=\"50%\"\n          textAnchor=\"middle\"\n          className=\"edge-label\"\n        >\n          {edge.label}\n        </textPath>\n      </text>\n    </ReactFlowProvider>\n  );\n};\n\nexport default CustomEdge;\n","import clsx from \"clsx\";\nimport React, { memo } from \"react\";\nimport { Handle, ReactFlowProvider } from \"react-flow-renderer\";\nimport { useSelector } from \"react-redux\";\n\nimport \"./index.css\";\n\nconst CustomNode = (node) => {\n  const graph = useSelector((state) => {\n    const { activeGraphId } = state.ui;\n    if (activeGraphId === 1) {\n      return state.v1Graph;\n    } else if (activeGraphId === 2) {\n      return state.v2Graph;\n    } else {\n      return state.v3Graph;\n    }\n  });\n\n  const isSource = graph.sourceNodeId === node.id;\n  const isDestination = graph.destinationNodeId === node.id;\n  const isVisited = node.data.shortestPath !== undefined;\n\n  return (\n    <ReactFlowProvider>\n      <div\n        className={clsx(\n          \"node\",\n          isDestination && \"destination\",\n          isSource && \"source\",\n          isVisited && \"visited\"\n        )}\n      >\n        <div className=\"label\">\n          {node.id}\n          {node.data.shortestPath !== undefined && (\n            <div className=\"shortest-path\">{node.data.shortestPath}</div>\n          )}\n        </div>\n        <Handle position=\"top\" id=\"handle-top\" />\n        <Handle position=\"left\" id=\"handle-left\" />\n        <Handle position=\"bottom\" id=\"handle-bottom\" />\n        <Handle position=\"right\" id=\"handle-right\" />\n      </div>\n    </ReactFlowProvider>\n  );\n};\n\nexport default CustomNode;\n","import { Grid, Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport ReactFlow from \"react-flow-renderer/nocss\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { actions as graphActions } from \"../../store/slices/v1Graph\";\nimport { isEdge, processEdge, processNode } from \"../../utils\";\nimport ColorCodes from \"../ColorCodes\";\n\nimport CustomEdge from \"../CustomEdge\";\nimport CustomNode from \"../CustomNode\";\n\nconst V1 = () => {\n  const dispatch = useDispatch();\n\n  const activeNodeId = useSelector((state) => state.v1Graph.activeNodeId);\n  const elements = useSelector((state) => {\n    const { nodes, edges } = state.v1Graph;\n    return nodes.map(processNode).concat(edges.map(processEdge));\n  });\n\n  if (activeNodeId !== null) {\n    const pathLength = prompt(\n      `Enter the length of the shortest path to node \"${activeNodeId}\":`\n    );\n    dispatch(\n      graphActions.submit({\n        pathLength,\n      })\n    );\n  }\n\n  const handleElementClick = (event, element) => {\n    if (isEdge(element)) {\n      return;\n    }\n    dispatch(\n      graphActions.select({\n        nodeId: element.id,\n      })\n    );\n  };\n\n  return (\n    <Grid className=\"grid-container\" container>\n      <Grid md={4}>\n        <div className=\"content-container\">\n          <p className=\"title\">Objective</p>\n          <p>\n            Given a directed graph with non-negative weights, find the shortest\n            path from the source node to every node in the graph.\n          </p>\n          <p className=\"title\">Setup</p>\n          <p>\n            You can click on any node to visit it and attempt to enter the\n            length of its shortest path, provided that all its parents have been\n            visited.\n          </p>\n          <p>\n            The length of the shortest path to a given <code>node</code> is the\n            minimum value of the following sum across all its parents:\n          </p>\n          <p>\n            <code>shortest_path[parent] + edge_weight[parent, node]</code>\n          </p>\n          <p>\n            The selected node will be annotated with the length of shortest path\n            entered by you.\n          </p>\n          <p>\n            You can click on any visited node to set it as the destination node\n            and see the shortest path from the source node.\n          </p>\n          <p>\n            If you select a node with unvisited parents, or if you enter an\n            incorrect shortest path length, you will see the corresponding\n            error, and you must try again.\n          </p>\n          <ColorCodes />\n        </div>\n      </Grid>\n      <Grid md={8} className=\"graph-container\">\n        <ReactFlow\n          zoomOnDoubleClick={false}\n          zoomOnScroll={false}\n          paneMoveable={false}\n          onLoad={(f) => f.fitView()}\n          onElementClick={handleElementClick}\n          elements={elements}\n          nodesDraggable={false}\n          nodesConnectable={false}\n          nodeTypes={{\n            customNode: CustomNode,\n          }}\n          edgeTypes={{\n            customEdge: CustomEdge,\n          }}\n        />\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default V1;\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport { getNode, getParentNodes, getShortestPath } from \"../../utils\";\nimport { actions as notificationsActions } from \"../slices/notifications\";\nimport * as fixtures from \"../fixtures\";\n\nconst selectedGraph = {\n  ...fixtures.pentagon,\n  sourceNodeId: \"a\",\n};\n\nconst getInitialState = () => {\n  return {\n    ...selectedGraph,\n    destinationNodeId: null,\n  };\n};\n\nconst v2Graph = createSlice({\n  name: \"v2Graph\",\n  initialState: getInitialState(),\n  reducers: {\n    reset: (state, action) => {\n      return getInitialState();\n    },\n    visit: (state, action) => {\n      const { nodeId } = action.payload;\n      const node = getNode(nodeId, state);\n      const [shortestPath, parentId] = getShortestPath(nodeId, state);\n      node.data = { shortestPath, parentId };\n    },\n    highlightPath: (state, action) => {\n      let { nodeId: currentNodeId } = action.payload;\n      state.destinationNodeId = currentNodeId;\n      let currentNode = getNode(currentNodeId, state);\n      let parentNodeId = currentNode.data.parentId;\n      while (parentNodeId !== \"0\") {\n        const index = state.edges.findIndex(\n          (edge) =>\n            edge.source === parentNodeId && edge.target === currentNodeId\n        );\n        // console.log(\n        //   `found edge ${parentNodeId} -> ${currentNodeId} at ${index}`\n        // );\n        state.edges[index].data.isHighlighted = true;\n        const parentNode = getNode(parentNodeId, state);\n        currentNodeId = parentNodeId;\n        parentNodeId = parentNode.data.parentId;\n      }\n    },\n    clearHighlightedPath: (state, action) => {\n      for (const [index, edge] of state.edges.entries()) {\n        state.edges[index].data.isHighlighted = false;\n        state.destinationNodeId = null;\n      }\n    },\n  },\n});\n\nexport const actions = {\n  reset: () => (dispatch) => dispatch(v2Graph.actions.reset()),\n  select:\n    ({ nodeId }) =>\n    (dispatch, getState) => {\n      const { v2Graph: graphState } = getState();\n      dispatch(v2Graph.actions.clearHighlightedPath());\n      const node = getNode(nodeId, graphState);\n      if (node.data.shortestPath !== undefined) {\n        return dispatch(v2Graph.actions.highlightPath({ nodeId }));\n      }\n      const parents = getParentNodes(nodeId, graphState);\n      for (const parent of parents) {\n        if (parent.data.shortestPath === undefined) {\n          return dispatch(\n            notificationsActions.enqueueSnackbar({\n              message: `Node \"${node.id}\" has unvisited parents`,\n              options: {\n                variant: \"warning\",\n              },\n            })\n          );\n        }\n      }\n      dispatch(v2Graph.actions.visit({ nodeId }));\n      // dispatch(v2Graph.actions.highlightPath({ nodeId }));\n    },\n};\n\nexport default v2Graph.reducer;\n","import { Grid } from \"@material-ui/core\";\nimport React from \"react\";\nimport ReactFlow from \"react-flow-renderer/nocss\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { actions as graphActions } from \"../../store/slices/v2Graph\";\nimport { isEdge, processEdge, processNode } from \"../../utils\";\nimport ColorCodes from \"../ColorCodes\";\n\nimport CustomEdge from \"../CustomEdge\";\nimport CustomNode from \"../CustomNode\";\n\nconst V2Graph = () => {\n  const dispatch = useDispatch();\n\n  const elements = useSelector((state) => {\n    const { nodes, edges } = state.v2Graph;\n    return nodes.map(processNode).concat(edges.map(processEdge));\n  });\n\n  const handleElementClick = (event, element) => {\n    if (isEdge(element)) {\n      return;\n    }\n    dispatch(\n      graphActions.select({\n        nodeId: element.id,\n      })\n    );\n  };\n\n  return (\n    <Grid className=\"grid-container\" container>\n      <Grid md={4}>\n        <div className=\"content-container\">\n          <p className=\"title\">Objective</p>\n          <p>\n            Given a directed graph with non-negative weights, find the shortest\n            path from the source node to every node in the graph.\n          </p>\n          <p className=\"title\">Setup</p>\n          <p>\n            You can click on any node to visit it, provided that all its parents\n            have been visited.\n          </p>\n          <p>\n            The system will annotate the selected node with the length of the\n            shortest path.\n          </p>\n          <p>\n            You can click on any visited node to set it as the destination node\n            and see the shortest path from the source node.\n          </p>\n          <p>\n            If you select a node with unvisited parents, you will see the\n            corresponding error, and you must try again.\n          </p>\n          <ColorCodes />\n        </div>\n      </Grid>\n      <Grid md={8} className=\"graph-container\">\n        <ReactFlow\n          zoomOnDoubleClick={false}\n          zoomOnScroll={false}\n          paneMoveable={false}\n          onLoad={(f) => f.fitView()}\n          onElementClick={handleElementClick}\n          elements={elements}\n          nodesDraggable={false}\n          nodesConnectable={false}\n          nodeTypes={{\n            customNode: CustomNode,\n          }}\n          edgeTypes={{\n            customEdge: CustomEdge,\n          }}\n        />\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default V2Graph;\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport { getNextNode, getNode, getShortestPath } from \"../../utils\";\nimport { actions as notificationsActions } from \"../slices/notifications\";\nimport * as fixtures from \"../fixtures\";\n\nconst selectedGraph = {\n  ...fixtures.pentagon,\n  sourceNodeId: \"a\",\n};\n\nconst getInitialState = () => {\n  return {\n    ...selectedGraph,\n    destinationNodeId: null,\n  };\n};\n\nconst v3Graph = createSlice({\n  name: \"v3Graph\",\n  initialState: getInitialState(),\n  reducers: {\n    reset: (state, action) => {\n      return getInitialState();\n    },\n    next: (state, action) => {\n      const node = getNextNode(state);\n      const [shortestPath, parentId] = getShortestPath(node.id, state);\n      node.data = { shortestPath, parentId };\n    },\n    highlightPath: (state, action) => {\n      let { nodeId: currentNodeId } = action.payload;\n      state.destinationNodeId = currentNodeId;\n      let currentNode = getNode(currentNodeId, state);\n      let parentNodeId = currentNode.data.parentId;\n      while (parentNodeId !== \"0\") {\n        const index = state.edges.findIndex(\n          (edge) =>\n            edge.source === parentNodeId && edge.target === currentNodeId\n        );\n        // console.log(\n        //   `found edge ${parentNodeId} -> ${currentNodeId} at ${index}`\n        // );\n        state.edges[index].data.isHighlighted = true;\n        const parentNode = getNode(parentNodeId, state);\n        currentNodeId = parentNodeId;\n        parentNodeId = parentNode.data.parentId;\n      }\n    },\n    clearHighlightedPath: (state, action) => {\n      for (const [index, edge] of state.edges.entries()) {\n        state.edges[index].data.isHighlighted = false;\n        state.destinationNodeId = null;\n      }\n    },\n  },\n});\n\nexport const actions = {\n  next: v3Graph.actions.next,\n  reset: () => (dispatch) => dispatch(v3Graph.actions.reset()),\n  select:\n    ({ nodeId }) =>\n    (dispatch, getState) => {\n      const { v3Graph: graphState } = getState();\n      console.dir(JSON.stringify(graphState));\n      dispatch(v3Graph.actions.clearHighlightedPath());\n      const node = getNode(nodeId, graphState);\n      if (node.data.shortestPath !== undefined) {\n        return dispatch(v3Graph.actions.highlightPath({ nodeId }));\n      } else {\n        return dispatch(\n          notificationsActions.enqueueSnackbar({\n            message: `Node \"${node.id}\" has not been visited yet`,\n            options: {\n              variant: \"warning\",\n            },\n          })\n        );\n      }\n    },\n};\n\nexport default v3Graph.reducer;\n","import { Button, Grid } from \"@material-ui/core\";\nimport React from \"react\";\nimport ReactFlow from \"react-flow-renderer/nocss\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { actions as graphActions } from \"../../store/slices/v3Graph\";\nimport { getNextNode, isEdge, processEdge, processNode } from \"../../utils\";\nimport ColorCodes from \"../ColorCodes\";\n\nimport \"./index.css\";\nimport CustomEdge from \"../CustomEdge\";\nimport CustomNode from \"../CustomNode\";\n\nconst V3Graph = () => {\n  const dispatch = useDispatch();\n\n  const graph = useSelector((state) => state.v3Graph);\n  const elements = graph.nodes\n    .map(processNode)\n    .concat(graph.edges.map(processEdge));\n\n  const handleElementClick = (event, element) => {\n    if (isEdge(element)) {\n      return;\n    }\n    dispatch(\n      graphActions.select({\n        nodeId: element.id,\n      })\n    );\n  };\n\n  const isNextDisabled = getNextNode(graph) === null;\n\n  const handleNextClick = () => {\n    dispatch(graphActions.next());\n  };\n\n  return (\n    <Grid className=\"grid-container\" container>\n      <Grid md={4}>\n        <div className=\"content-container\">\n          <p className=\"title\">Objective</p>\n          <p>\n            Given a directed graph with non-negative weights, find the shortest\n            path from the source node to every node in the graph.\n          </p>\n          <p className=\"title\">Setup</p>\n          <p>\n            You can click on the\n            <span className=\"next-button-indicator\">NEXT</span> button.\n          </p>\n          <p>\n            On each click of this button, the system will visit a valid node,\n            and annotate it with the length of the shortest path.\n          </p>\n          <p>\n            You can click on any visited node to set it as the destination node\n            and see the shortest path from the source node.\n          </p>\n          <ColorCodes />\n        </div>\n      </Grid>\n      <Grid md={8} className=\"graph-container\">\n        <Button\n          disabled={isNextDisabled}\n          className=\"next-button\"\n          onClick={handleNextClick}\n          size=\"large\"\n          color=\"primary\"\n          variant=\"contained\"\n        >\n          {isNextDisabled ? \"DONE\" : \"NEXT\"}\n        </Button>\n        <ReactFlow\n          zoomOnDoubleClick={false}\n          zoomOnScroll={false}\n          paneMoveable={false}\n          onLoad={(f) => f.fitView()}\n          onElementClick={handleElementClick}\n          elements={elements}\n          nodesDraggable={false}\n          nodesConnectable={false}\n          nodeTypes={{\n            customNode: CustomNode,\n          }}\n          edgeTypes={{\n            customEdge: CustomEdge,\n          }}\n        />\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default V3Graph;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst ui = createSlice({\n  name: \"ui\",\n  initialState: {\n    activeGraphId: 1,\n  },\n  reducers: {\n    setActiveGraph: (state, action) => {\n      const { graphId } = action.payload;\n      state.activeGraphId = graphId;\n    },\n  },\n});\n\nexport const actions = ui.actions;\n\nexport default ui.reducer;\n","import React, { useEffect, useState } from \"react\";\nimport {\n  AppBar,\n  Grid,\n  Tab,\n  Tabs,\n  Toolbar,\n  Typography,\n} from \"@material-ui/core\";\n\nimport \"./App.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Notifier from \"./components/Notifier\";\nimport V1Graph from \"./components/V1Graph\";\nimport V2Graph from \"./components/V2Graph\";\nimport V3Graph from \"./components/V3Graph\";\nimport { actions as uiActions } from \"./store/slices/ui\";\nimport { actions as v1GraphActions } from \"./store/slices/v1Graph\";\nimport { actions as v2GraphActions } from \"./store/slices/v2Graph\";\nimport { actions as v3GraphActions } from \"./store/slices/v3Graph\";\n\nconst App = () => {\n  const activeGraphId = useSelector((state) => state.ui.activeGraphId);\n  const dispatch = useDispatch();\n\n  const handleTabClick = (event, graphId) => {\n    dispatch(uiActions.setActiveGraph({ graphId }));\n  };\n\n  useEffect(() => {\n    dispatch(v1GraphActions.reset());\n    dispatch(v2GraphActions.reset());\n    dispatch(v3GraphActions.reset());\n  }, [activeGraphId]);\n\n  return (\n    <div className=\"root\">\n      <Notifier />\n      <AppBar className=\"appbar\" position=\"relative\">\n        <Toolbar>\n          <Grid container justify=\"space-between\" alignItems=\"center\">\n            <Grid item>\n              <Typography variant=\"h6\">\n                Shortest Path using Dynamic Programming\n              </Typography>\n            </Grid>\n            <Grid item>\n              <Tabs value={activeGraphId} onChange={handleTabClick}>\n                <Tab label=\"v1\" value={1} />\n                <Tab label=\"v2\" value={2} />\n                <Tab label=\"v3\" value={3} />\n              </Tabs>\n            </Grid>\n          </Grid>\n        </Toolbar>\n      </AppBar>\n      {activeGraphId === 1 && <V1Graph />}\n      {activeGraphId === 2 && <V2Graph />}\n      {activeGraphId === 3 && <V3Graph />}\n    </div>\n  );\n};\n\nexport default App;\n","import { combineReducers, configureStore } from \"@reduxjs/toolkit\";\n\nimport notifications from \"./slices/notifications\";\nimport v1Graph from \"./slices/v1Graph\";\nimport v2Graph from \"./slices/v2Graph\";\nimport v3Graph from \"./slices/v3Graph\";\nimport ui from \"./slices/ui\";\n\nexport default configureStore({\n  reducer: combineReducers({\n    notifications,\n    v1Graph,\n    v2Graph,\n    v3Graph,\n    ui,\n  }),\n});\n","import \"react-flow-renderer/dist/style.css\";\nimport \"react-flow-renderer/dist/theme-default.css\";\nimport { StylesProvider } from \"@material-ui/core\";\nimport { SnackbarProvider } from \"notistack\";\nimport React from \"react\";\nimport { render } from \"react-dom\";\nimport { Provider } from \"react-redux\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport store from \"./store\";\n\nrender(\n  <StylesProvider injectFirst>\n    <Provider store={store}>\n      <SnackbarProvider\n        anchorOrigin={{\n          vertical: \"top\",\n          horizontal: \"right\",\n        }}\n      >\n        <App />\n      </SnackbarProvider>\n    </Provider>\n  </StylesProvider>,\n  document.querySelector(\"#app\")\n);\n"],"sourceRoot":""}
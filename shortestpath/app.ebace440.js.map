{"version":3,"sources":["webpack:///./src/store/slices/notifications/actions.js","webpack:///./src/store/slices/notifications/index.js","webpack:///./src/components/Notifier.js","webpack:///./src/utils.js","webpack:///./src/store/slices/v1Graph.js","webpack:///./src/components/CustomEdge/index.js","webpack:///./src/components/CustomNode/index.js","webpack:///./src/components/V1Graph/index.js","webpack:///./src/store/slices/v2Graph.js","webpack:///./src/components/V2Graph/index.js","webpack:///./src/store/slices/v3Graph.js","webpack:///./src/components/V3Graph/index.js","webpack:///./src/App.js","webpack:///./src/store/index.js","webpack:///./src/index.js"],"names":["ENQUEUE_SNACKBAR","CLOSE_SNACKBAR","REMOVE_SNACKBAR","enqueueSnackbar","notification","key","options","type","Date","getTime","Math","random","closeSnackbar","dismissAll","removeSnackbar","defaultState","items","displayed","Notifier","dispatch","useDispatch","notifications","useSelector","store","useSnackbar","removeDisplayed","id","filter","React","useEffect","forEach","message","dismissed","includes","onClose","event","reason","myKey","notificationsActions","onExited","processNode","node","position","split","x","y","Object","assign","processEdge","edge","arrowHeadType","isEdge","element","getNode","nodeId","graph","nodes","find","n","getParentNodes","edges","target","map","source","getShortestPath","shortestPathLength","Infinity","shortestPathParentId","parents","currentPathLength","Number","label","data","shortestPath","selectedGraph","parentId","sourceHandle","targetHandle","v1Graph","createSlice","name","initialState","activeNodeId","reducers","setActiveNode","state","action","payload","clearActiveNode","visit","highlightPath","currentNodeId","parentNodeId","index","findIndex","isHighlighted","console","dir","JSON","stringify","parentNode","clearHighlightedPath","entries","reset","actions","pathLength","getState","variant","graphState","undefined","CustomEdge","sourceX","sourceY","sourcePosition","targetX","targetY","targetPosition","edgePath","getBezierPath","markerEnd","getMarkerEnd","markerEndId","style","className","clsx","d","dy","href","startOffset","textAnchor","CustomNode","memo","Grid","md","V1","elements","concat","prompt","graphActions","container","zoomOnDoubleClick","zoomOnScroll","paneMoveable","onLoad","f","fitView","onElementClick","nodesDraggable","nodesConnectable","nodeTypes","customNode","edgeTypes","customEdge","v2Graph","V2Graph","v3Graph","item","Typography","Tab","V1Graph","App","useState","selectedTab","setSelectedTab","v1GraphActions","v2GraphActions","v3GraphActions","AppBar","Toolbar","justify","alignItems","Tabs","value","onChange","e","configureStore","reducer","combineReducers","render","anchorOrigin","vertical","horizontal","document","querySelector"],"mappings":"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","file":"app.ebace440.js","sourcesContent":["export const ENQUEUE_SNACKBAR = \"ENQUEUE_SNACKBAR\";\nexport const CLOSE_SNACKBAR = \"CLOSE_SNACKBAR\";\nexport const REMOVE_SNACKBAR = \"REMOVE_SNACKBAR\";\n\nexport const enqueueSnackbar = (notification) => {\n  const key = notification.options && notification.options.key;\n\n  return {\n    type: ENQUEUE_SNACKBAR,\n    notification: {\n      ...notification,\n      key: key || new Date().getTime() + Math.random(),\n    },\n  };\n};\n\nexport const closeSnackbar = (key) => ({\n  type: CLOSE_SNACKBAR,\n  dismissAll: !key, // dismiss all if no key has been defined\n  key,\n});\n\nexport const removeSnackbar = (key) => ({\n  type: REMOVE_SNACKBAR,\n  key,\n});\n","import { ENQUEUE_SNACKBAR, CLOSE_SNACKBAR, REMOVE_SNACKBAR } from \"./actions\";\nexport * as actions from \"./actions\";\n\nconst defaultState = {\n  items: [],\n};\n\nexport default (state = defaultState, action) => {\n  switch (action.type) {\n    case ENQUEUE_SNACKBAR:\n      return {\n        ...state,\n        items: [\n          ...state.items,\n          {\n            key: action.key,\n            ...action.notification,\n          },\n        ],\n      };\n\n    case CLOSE_SNACKBAR:\n      return {\n        ...state,\n        items: state.items.map((notification) =>\n          action.dismissAll || notification.key === action.key\n            ? { ...notification, dismissed: true }\n            : { ...notification }\n        ),\n      };\n\n    case REMOVE_SNACKBAR:\n      return {\n        ...state,\n        items: state.items.filter(\n          (notification) => notification.key !== action.key\n        ),\n      };\n\n    default:\n      return state;\n  }\n};\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useSnackbar } from \"notistack\";\nimport { actions as notificationsActions } from \"../store/slices/notifications\";\n\nlet displayed = [];\n\nconst Notifier = () => {\n  const dispatch = useDispatch();\n  const notifications = useSelector((store) => store.notifications.items || []);\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n\n  const storeDisplayed = (id) => {\n    displayed = [...displayed, id];\n  };\n\n  const removeDisplayed = (id) => {\n    displayed = [...displayed.filter((key) => id !== key)];\n  };\n\n  React.useEffect(() => {\n    notifications.forEach(\n      ({ key, message, options = {}, dismissed = false }) => {\n        if (dismissed) {\n          // dismiss snackbar using notistack\n          closeSnackbar(key);\n          return;\n        }\n\n        // do nothing if snackbar is already displayed\n        if (displayed.includes(key)) return;\n\n        // display snackbar using notistack\n        enqueueSnackbar(message, {\n          key,\n          ...options,\n          onClose: (event, reason, myKey) => {\n            if (reason === 'clickaway') {\n              dispatch(notificationsActions.closeSnackbar(key));\n              removeDisplayed(key);\n            }\n            if (options.onClose) {\n              options.onClose(event, reason, myKey);\n            }\n          },\n          onExited: (event, myKey) => {\n            // remove this snackbar from redux store\n            dispatch(notificationsActions.removeSnackbar(myKey));\n            removeDisplayed(myKey);\n          },\n        });\n\n        // keep track of snackbars that we've displayed\n        storeDisplayed(key);\n      }\n    );\n  }, [notifications, closeSnackbar, enqueueSnackbar, dispatch]);\n\n  return null;\n};\n\nexport default Notifier;\n","export const processNode = (node) => {\n  const [x, y] = node.position.split(\",\");\n  return Object.assign({}, node, {\n    type: \"customNode\",\n    position: {\n      x,\n      y,\n    },\n  });\n};\n\nexport const processEdge = (edge) => {\n  return Object.assign({}, edge, {\n    type: \"customEdge\",\n    arrowHeadType: \"arrowclosed\",\n  });\n};\n\nexport const isEdge = (element) => element.id.includes(\"-\");\n\nexport const getNode = (nodeId, graph) =>\n  graph.nodes.find((n) => n.id === nodeId);\n\nexport const getParentNodes = (nodeId, graph) =>\n  graph.edges\n    .filter((edge) => edge.target === nodeId)\n    .map((edge) => graph.nodes.find((node) => node.id === edge.source));\n\nexport const getShortestPath = (nodeId, graph) => {\n  let shortestPathLength = Infinity,\n    shortestPathParentId = -1;\n  const parents = getParentNodes(nodeId, graph);\n  for (const edge of graph.edges) {\n    if (edge.target === nodeId) {\n      const currentPathLength =\n        Number(edge.label) +\n        parents.find((node) => node.id === edge.source).data.shortestPath;\n      if (currentPathLength < shortestPathLength) {\n        shortestPathLength = currentPathLength;\n        shortestPathParentId = edge.source;\n      }\n    }\n  }\n  return [shortestPathLength, shortestPathParentId];\n};\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport { getNode, getParentNodes, getShortestPath } from \"../../utils\";\nimport { actions as notificationsActions } from \"../slices/notifications\";\n\nconst pentagon = {\n  nodes: [\n    {\n      id: \"a\",\n      position: \"100,0\",\n      data: {\n        shortestPath: 0,\n        parentId: \"0\",\n      },\n    },\n    {\n      id: \"b\",\n      position: \"0,100\",\n      data: {},\n    },\n    {\n      id: \"c\",\n      position: \"200,100\",\n      data: {},\n    },\n    {\n      id: \"d\",\n      position: \"0,200\",\n      data: {},\n    },\n    {\n      id: \"e\",\n      position: \"200,200\",\n      data: {},\n    },\n  ],\n  edges: [\n    {\n      id: \"ea-b\",\n      source: \"a\",\n      target: \"b\",\n      sourceHandle: \"handle-left\",\n      targetHandle: \"handle-top\",\n      label: \"1\",\n      data: {},\n    },\n    {\n      id: \"ea-c\",\n      source: \"a\",\n      target: \"c\",\n      sourceHandle: \"handle-right\",\n      targetHandle: \"handle-top\",\n      label: \"2\",\n      data: {},\n    },\n    {\n      id: \"eb-d\",\n      source: \"b\",\n      target: \"d\",\n      sourceHandle: \"handle-bottom\",\n      targetHandle: \"handle-top\",\n      label: \"100\",\n      data: {},\n    },\n    {\n      id: \"ec-e\",\n      source: \"c\",\n      target: \"e\",\n      sourceHandle: \"handle-bottom\",\n      targetHandle: \"handle-top\",\n      label: \"1\",\n      data: {},\n    },\n    {\n      id: \"ed-e\",\n      source: \"d\",\n      target: \"e\",\n      sourceHandle: \"handle-right\",\n      targetHandle: \"handle-left\",\n      label: \"200\",\n      data: {},\n    },\n  ],\n  source: \"1\",\n};\n\nconst square = {\n  nodes: [\n    {\n      id: \"s\",\n      position: \"0,0\",\n      data: {\n        shortestPath: 0,\n        parentId: \"0\",\n      },\n    },\n    {\n      id: \"a\",\n      position: \"100,0\",\n      data: {},\n    },\n    {\n      id: \"t\",\n      position: \"0,100\",\n      data: {},\n    },\n    {\n      id: \"b\",\n      position: \"100,100\",\n      data: {},\n    },\n    {\n      id: \"tx\",\n      position: \"-100,200\",\n      data: {},\n    },\n  ],\n  edges: [\n    {\n      id: \"es-a\",\n      source: \"s\",\n      target: \"a\",\n      sourceHandle: \"handle-right\",\n      targetHandle: \"handle-left\",\n      label: \"1\",\n      data: {},\n    },\n    {\n      id: \"es-t\",\n      source: \"s\",\n      target: \"t\",\n      sourceHandle: \"handle-bottom\",\n      targetHandle: \"handle-top\",\n      label: \"2\",\n      data: {},\n    },\n    {\n      id: \"ea-b\",\n      source: \"a\",\n      target: \"b\",\n      sourceHandle: \"handle-bottom\",\n      targetHandle: \"handle-top\",\n      label: \"1\",\n      data: {},\n    },\n    {\n      id: \"eb-t\",\n      source: \"b\",\n      target: \"t\",\n      sourceHandle: \"handle-left\",\n      targetHandle: \"handle-right\",\n      label: \"1\",\n      data: {},\n    },\n    {\n      id: \"et-tx\",\n      source: \"t\",\n      target: \"tx\",\n      sourceHandle: \"handle-bottom\",\n      targetHandle: \"handle-top\",\n      label: \"10\",\n      data: {},\n    },\n  ],\n};\n\nconst selectedGraph = pentagon;\n\nconst getEmptyState = () => {\n  return {\n    nodes: selectedGraph.nodes,\n    edges: selectedGraph.edges,\n    activeNodeId: null,\n  };\n};\n\nconst v1Graph = createSlice({\n  name: \"v1Graph\",\n  initialState: getEmptyState(),\n  reducers: {\n    setActiveNode: (state, action) => {\n      const { nodeId } = action.payload;\n      state.activeNodeId = nodeId;\n    },\n    clearActiveNode: (state, action) => {\n      state.activeNodeId = null;\n    },\n    visit: (state, action) => {\n      const { nodeId } = action.payload;\n      const node = getNode(nodeId, state);\n      const [shortestPath, parentId] = getShortestPath(nodeId, state);\n      node.data = { shortestPath, parentId };\n    },\n    highlightPath: (state, action) => {\n      let { nodeId: currentNodeId } = action.payload;\n      let currentNode = getNode(currentNodeId, state);\n      let parentNodeId = currentNode.data.parentId;\n      while (parentNodeId !== \"0\") {\n        const index = state.edges.findIndex(\n          (edge) =>\n            edge.source === parentNodeId && edge.target === currentNodeId\n        );\n        // console.log(\n        //   `found edge ${parentNodeId} -> ${currentNodeId} at ${index}`\n        // );\n        state.edges[index].data.isHighlighted = true;\n        console.dir(JSON.stringify(state.edges[index]));\n        const parentNode = getNode(parentNodeId, state);\n        currentNodeId = parentNodeId;\n        parentNodeId = parentNode.data.parentId;\n      }\n    },\n    clearHighlightedPath: (state, action) => {\n      for (const [index, edge] of state.edges.entries()) {\n        state.edges[index].data.isHighlighted = false;\n      }\n    },\n    reset: (state, action) => {\n      return {\n        nodes: selectedGraph.nodes,\n        edges: selectedGraph.edges,\n        activeNodeId: null,\n      };\n    },\n  },\n});\n\nexport const actions = {\n  reset: () => (dispatch) => dispatch(v1Graph.actions.reset()),\n  submit:\n    ({ pathLength }) =>\n    (dispatch, getState) => {\n      if (pathLength === null) {\n        return dispatch(v1Graph.actions.clearActiveNode());\n      }\n      const state = getState().v1Graph;\n      const [shortestPath, parentId] = getShortestPath(\n        state.activeNodeId,\n        state\n      );\n      if (shortestPath !== Number(pathLength)) {\n        dispatch(\n          notificationsActions.enqueueSnackbar({\n            message: `Incorrect shortest path length`,\n            options: {\n              variant: \"error\",\n            },\n          })\n        );\n      } else {\n        dispatch(\n          v1Graph.actions.visit({\n            nodeId: state.activeNodeId,\n          })\n        );\n      }\n      return dispatch(v1Graph.actions.clearActiveNode());\n    },\n  select:\n    ({ nodeId }) =>\n    (dispatch, getState) => {\n      const { v1Graph: graphState } = getState();\n      dispatch(v1Graph.actions.clearHighlightedPath());\n      const node = getNode(nodeId, graphState);\n      if (node.data.shortestPath !== undefined) {\n        return dispatch(v1Graph.actions.highlightPath({ nodeId }));\n      }\n      const parents = getParentNodes(nodeId, graphState);\n      for (const parent of parents) {\n        if (parent.data.shortestPath === undefined) {\n          return dispatch(\n            notificationsActions.enqueueSnackbar({\n              message: `Node \"${node.id}\" has unvisited parents`,\n              options: {\n                variant: \"warning\",\n              },\n            })\n          );\n        }\n      }\n      dispatch(v1Graph.actions.setActiveNode({ nodeId }));\n      // dispatch(v1Graph.actions.highlightPath({ nodeId }));\n    },\n};\n\nexport default v1Graph.reducer;\n","import clsx from \"clsx\";\nimport React from \"react\";\nimport {\n  getBezierPath,\n  getMarkerEnd,\n  ReactFlowProvider,\n} from \"react-flow-renderer\";\n\nimport \"./index.css\";\n\nconst CustomEdge = (edge) => {\n  const { sourceX, sourceY, sourcePosition, targetX, targetY, targetPosition } =\n    edge;\n  const edgePath = getBezierPath({\n    sourceX,\n    sourceY,\n    sourcePosition,\n    targetX,\n    targetY,\n    targetPosition,\n  });\n  const markerEnd = getMarkerEnd(edge.arrowHeadType, edge.markerEndId);\n\n  return (\n    <ReactFlowProvider>\n      <path\n        id={edge.id}\n        style={edge.style}\n        className={clsx(\n          \"react-flow__edge-path\",\n          \"edge\",\n          edge.data.isHighlighted && \"highlighted\"\n        )}\n        d={edgePath}\n        markerEnd={markerEnd}\n      />\n      <text dy={-8}>\n        <textPath\n          href={`#${edge.id}`}\n          startOffset=\"50%\"\n          textAnchor=\"middle\"\n          className=\"edge-label\"\n        >\n          {edge.label}\n        </textPath>\n      </text>\n    </ReactFlowProvider>\n  );\n};\n\nexport default CustomEdge;\n","import clsx from \"clsx\";\nimport React, { memo } from \"react\";\nimport { Handle, ReactFlowProvider } from \"react-flow-renderer\";\n\nimport \"./index.css\";\n\nconst CustomNode = memo((node) => {\n  return (\n    <ReactFlowProvider>\n      <div\n        className={clsx(\n          \"node\",\n          node.data.shortestPath !== undefined && \"visited\"\n        )}\n      >\n        <div className=\"label\">\n          {node.id}\n          {node.data.shortestPath !== undefined && (\n            <div className=\"shortest-path\">{node.data.shortestPath}</div>\n          )}\n        </div>\n        <Handle position=\"top\" id=\"handle-top\" />\n        <Handle position=\"left\" id=\"handle-left\" />\n        <Handle position=\"bottom\" id=\"handle-bottom\" />\n        <Handle position=\"right\" id=\"handle-right\" />\n      </div>\n    </ReactFlowProvider>\n  );\n});\n\nexport default CustomNode;\n","import { Grid, Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport ReactFlow from \"react-flow-renderer/nocss\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { actions as graphActions } from \"../../store/slices/v1Graph\";\nimport { isEdge, processEdge, processNode } from \"../../utils\";\n\nimport CustomEdge from \"../CustomEdge\";\nimport CustomNode from \"../CustomNode\";\n\nconst V1 = () => {\n  const dispatch = useDispatch();\n\n  const activeNodeId = useSelector((state) => state.v1Graph.activeNodeId);\n  const elements = useSelector((state) => {\n    const { nodes, edges } = state.v1Graph;\n    return nodes.map(processNode).concat(edges.map(processEdge));\n  });\n\n  if (activeNodeId !== null) {\n    const pathLength = prompt(\n      `Enter the length of the shortest path to node \"${activeNodeId}\":`\n    );\n    dispatch(\n      graphActions.submit({\n        pathLength,\n      })\n    );\n  }\n\n  const handleElementClick = (event, element) => {\n    if (isEdge(element)) {\n      return;\n    }\n    dispatch(\n      graphActions.select({\n        nodeId: element.id,\n      })\n    );\n  };\n\n  return (\n    <Grid className=\"grid-container\" container>\n      <Grid md={4}>\n        <div className=\"content-container\">\n          <p className=\"title\">Objective</p>\n          <p>\n            Given a directed graph with non-negative weights, find the shortest\n            path from the source node to every node in the graph.\n          </p>\n          <p className=\"title\">Setup</p>\n          <p>\n            You can click on any node to visit it and attempt to enter the\n            length of its shortest path, provided that all its parents have been\n            visited.\n          </p>\n          <p>\n            The length of the shortest path to a given <code>node</code> is the\n            minimum value of the following sum across all its parents:\n          </p>\n          <p>\n            <code>shortest_path[parent] + edge_weight[parent, node]</code>\n          </p>\n          <p>\n            Your input for the shortest path length of a given node will be\n            rendered next to the node label.\n          </p>\n          <p>\n            You can click on any visited node to see the shortest path from the\n            source node.\n          </p>\n          <p>\n            If you select a node with unvisited parents, or if you enter an\n            incorrect shortest path length, you will see the corresponding\n            error, and you must try again.\n          </p>\n          <p className=\"title\">Color Codes</p>\n          <p>\n            <div className=\"color-block-container\">\n              <span className=\"color-block blue\" /> Unvisited Node\n            </div>\n            <div className=\"color-block-container\">\n              <span className=\"color-block green\" /> Visited Node\n            </div>\n            <div className=\"color-block-container\">\n              <span className=\"color-block grey\" /> Unselected Edge\n            </div>\n            <div className=\"color-block-container\">\n              <span className=\"color-block yellow\" /> Shortest Path Edge\n            </div>\n          </p>\n        </div>\n      </Grid>\n      <Grid md={8} className=\"graph-container\">\n        <ReactFlow\n          zoomOnDoubleClick={false}\n          zoomOnScroll={false}\n          paneMoveable={false}\n          onLoad={(f) => f.fitView()}\n          onElementClick={handleElementClick}\n          elements={elements}\n          nodesDraggable={false}\n          nodesConnectable={false}\n          nodeTypes={{\n            customNode: CustomNode,\n          }}\n          edgeTypes={{\n            customEdge: CustomEdge,\n          }}\n        />\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default V1;\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport { getNode, getParentNodes, getShortestPath } from \"../../utils\";\nimport { actions as notificationsActions } from \"../slices/notifications\";\n\nconst pentagon = {\n  nodes: [\n    {\n      id: \"a\",\n      position: \"100,0\",\n      data: {\n        shortestPath: 0,\n        parentId: \"0\",\n      },\n    },\n    {\n      id: \"b\",\n      position: \"0,100\",\n      data: {},\n    },\n    {\n      id: \"c\",\n      position: \"200,100\",\n      data: {},\n    },\n    {\n      id: \"d\",\n      position: \"0,200\",\n      data: {},\n    },\n    {\n      id: \"e\",\n      position: \"200,200\",\n      data: {},\n    },\n  ],\n  edges: [\n    {\n      id: \"ea-b\",\n      source: \"a\",\n      target: \"b\",\n      sourceHandle: \"handle-left\",\n      targetHandle: \"handle-top\",\n      label: \"1\",\n      data: {},\n    },\n    {\n      id: \"ea-c\",\n      source: \"a\",\n      target: \"c\",\n      sourceHandle: \"handle-right\",\n      targetHandle: \"handle-top\",\n      label: \"2\",\n      data: {},\n    },\n    {\n      id: \"eb-d\",\n      source: \"b\",\n      target: \"d\",\n      sourceHandle: \"handle-bottom\",\n      targetHandle: \"handle-top\",\n      label: \"100\",\n      data: {},\n    },\n    {\n      id: \"ec-e\",\n      source: \"c\",\n      target: \"e\",\n      sourceHandle: \"handle-bottom\",\n      targetHandle: \"handle-top\",\n      label: \"1\",\n      data: {},\n    },\n    {\n      id: \"ed-e\",\n      source: \"d\",\n      target: \"e\",\n      sourceHandle: \"handle-right\",\n      targetHandle: \"handle-left\",\n      label: \"200\",\n      data: {},\n    },\n  ],\n  source: \"1\",\n};\n\nconst square = {\n  nodes: [\n    {\n      id: \"s\",\n      position: \"0,0\",\n      data: {\n        shortestPath: 0,\n        parentId: \"0\",\n      },\n    },\n    {\n      id: \"a\",\n      position: \"100,0\",\n      data: {},\n    },\n    {\n      id: \"t\",\n      position: \"0,100\",\n      data: {},\n    },\n    {\n      id: \"b\",\n      position: \"100,100\",\n      data: {},\n    },\n    {\n      id: \"tx\",\n      position: \"-100,200\",\n      data: {},\n    },\n  ],\n  edges: [\n    {\n      id: \"es-a\",\n      source: \"s\",\n      target: \"a\",\n      sourceHandle: \"handle-right\",\n      targetHandle: \"handle-left\",\n      label: \"1\",\n      data: {},\n    },\n    {\n      id: \"es-t\",\n      source: \"s\",\n      target: \"t\",\n      sourceHandle: \"handle-bottom\",\n      targetHandle: \"handle-top\",\n      label: \"2\",\n      data: {},\n    },\n    {\n      id: \"ea-b\",\n      source: \"a\",\n      target: \"b\",\n      sourceHandle: \"handle-bottom\",\n      targetHandle: \"handle-top\",\n      label: \"1\",\n      data: {},\n    },\n    {\n      id: \"eb-t\",\n      source: \"b\",\n      target: \"t\",\n      sourceHandle: \"handle-left\",\n      targetHandle: \"handle-right\",\n      label: \"1\",\n      data: {},\n    },\n    {\n      id: \"et-tx\",\n      source: \"t\",\n      target: \"tx\",\n      sourceHandle: \"handle-bottom\",\n      targetHandle: \"handle-top\",\n      label: \"10\",\n      data: {},\n    },\n  ],\n};\n\nconst selectedGraph = pentagon;\n\nconst v2Graph = createSlice({\n  name: \"v2Graph\",\n  initialState: selectedGraph,\n  reducers: {\n    reset: (state, action) => {\n      return selectedGraph;\n    },\n    visit: (state, action) => {\n      const { nodeId } = action.payload;\n      const node = getNode(nodeId, state);\n      const [shortestPath, parentId] = getShortestPath(nodeId, state);\n      node.data = { shortestPath, parentId };\n    },\n    highlightPath: (state, action) => {\n      let { nodeId: currentNodeId } = action.payload;\n      let currentNode = getNode(currentNodeId, state);\n      let parentNodeId = currentNode.data.parentId;\n      while (parentNodeId !== \"0\") {\n        const index = state.edges.findIndex(\n          (edge) =>\n            edge.source === parentNodeId && edge.target === currentNodeId\n        );\n        // console.log(\n        //   `found edge ${parentNodeId} -> ${currentNodeId} at ${index}`\n        // );\n        state.edges[index].data.isHighlighted = true;\n        console.dir(JSON.stringify(state.edges[index]));\n        const parentNode = getNode(parentNodeId, state);\n        currentNodeId = parentNodeId;\n        parentNodeId = parentNode.data.parentId;\n      }\n    },\n    clearHighlightedPath: (state, action) => {\n      for (const [index, edge] of state.edges.entries()) {\n        state.edges[index].data.isHighlighted = false;\n      }\n    },\n  },\n});\n\nexport const actions = {\n  reset: () => (dispatch) => dispatch(v2Graph.actions.reset()),\n  select:\n    ({ nodeId }) =>\n    (dispatch, getState) => {\n      const { v2Graph: graphState } = getState();\n      dispatch(v2Graph.actions.clearHighlightedPath());\n      const node = getNode(nodeId, graphState);\n      if (node.data.shortestPath !== undefined) {\n        return dispatch(v2Graph.actions.highlightPath({ nodeId }));\n      }\n      const parents = getParentNodes(nodeId, graphState);\n      for (const parent of parents) {\n        if (parent.data.shortestPath === undefined) {\n          return dispatch(\n            notificationsActions.enqueueSnackbar({\n              message: `Node \"${node.id}\" has unvisited parents`,\n              options: {\n                variant: \"warning\",\n              },\n            })\n          );\n        }\n      }\n      dispatch(v2Graph.actions.visit({ nodeId }));\n      // dispatch(v2Graph.actions.highlightPath({ nodeId }));\n    },\n};\n\nexport default v2Graph.reducer;\n","import { Grid } from \"@material-ui/core\";\nimport React from \"react\";\nimport ReactFlow from \"react-flow-renderer/nocss\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { actions as graphActions } from \"../../store/slices/v2Graph\";\nimport { isEdge, processEdge, processNode } from \"../../utils\";\n\nimport CustomEdge from \"../CustomEdge\";\nimport CustomNode from \"../CustomNode\";\n\nconst V2Graph = () => {\n  const dispatch = useDispatch();\n\n  const elements = useSelector((state) => {\n    const { nodes, edges } = state.v2Graph;\n    return nodes.map(processNode).concat(edges.map(processEdge));\n  });\n\n  const handleElementClick = (event, element) => {\n    if (isEdge(element)) {\n      return;\n    }\n    dispatch(\n      graphActions.select({\n        nodeId: element.id,\n      })\n    );\n  };\n\n  return (\n    <Grid className=\"grid-container\" container>\n      <Grid md={4}>\n        <div className=\"content-container\">\n          <p className=\"title\">Objective</p>\n          <p>\n            Given a directed graph with non-negative weights, find the shortest\n            path from the source node to every node in the graph.\n          </p>\n          <p className=\"title\">Setup</p>\n          <p>\n            You can click on any node to visit it and attempt to enter the\n            length of its shortest path, provided that all its parents have been\n            visited.\n          </p>\n          <p>\n            The system will calculate the length of shortest path to the\n            selected node, and render it next to the node label.\n          </p>\n          <p>\n            You can click on any visited node to see the shortest path from the\n            source node.\n          </p>\n          <p>\n            If you select a node with unvisited parents, you will see the\n            corresponding error, and you must try again.\n          </p>\n          <p className=\"title\">Color Codes</p>\n          <p>\n            <div className=\"color-block-container\">\n              <span className=\"color-block blue\" /> Unvisited Node\n            </div>\n            <div className=\"color-block-container\">\n              <span className=\"color-block green\" /> Visited Node\n            </div>\n            <div className=\"color-block-container\">\n              <span className=\"color-block grey\" /> Unselected Edge\n            </div>\n            <div className=\"color-block-container\">\n              <span className=\"color-block yellow\" /> Shortest Path Edge\n            </div>\n          </p>\n        </div>\n      </Grid>\n      <Grid md={8} className=\"graph-container\">\n        <ReactFlow\n          zoomOnDoubleClick={false}\n          zoomOnScroll={false}\n          paneMoveable={false}\n          onLoad={(f) => f.fitView()}\n          onElementClick={handleElementClick}\n          elements={elements}\n          nodesDraggable={false}\n          nodesConnectable={false}\n          nodeTypes={{\n            customNode: CustomNode,\n          }}\n          edgeTypes={{\n            customEdge: CustomEdge,\n          }}\n        />\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default V2Graph;\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport { getNode, getParentNodes, getShortestPath } from \"../../utils\";\nimport { actions as notificationsActions } from \"../slices/notifications\";\n\nconst pentagon = {\n  nodes: [\n    {\n      id: \"a\",\n      position: \"100,0\",\n      data: {\n        shortestPath: 0,\n        parentId: \"0\",\n      },\n    },\n    {\n      id: \"b\",\n      position: \"0,100\",\n      data: {},\n    },\n    {\n      id: \"c\",\n      position: \"200,100\",\n      data: {},\n    },\n    {\n      id: \"d\",\n      position: \"0,200\",\n      data: {},\n    },\n    {\n      id: \"e\",\n      position: \"200,200\",\n      data: {},\n    },\n  ],\n  edges: [\n    {\n      id: \"ea-b\",\n      source: \"a\",\n      target: \"b\",\n      sourceHandle: \"handle-left\",\n      targetHandle: \"handle-top\",\n      label: \"1\",\n      data: {},\n    },\n    {\n      id: \"ea-c\",\n      source: \"a\",\n      target: \"c\",\n      sourceHandle: \"handle-right\",\n      targetHandle: \"handle-top\",\n      label: \"2\",\n      data: {},\n    },\n    {\n      id: \"eb-d\",\n      source: \"b\",\n      target: \"d\",\n      sourceHandle: \"handle-bottom\",\n      targetHandle: \"handle-top\",\n      label: \"100\",\n      data: {},\n    },\n    {\n      id: \"ec-e\",\n      source: \"c\",\n      target: \"e\",\n      sourceHandle: \"handle-bottom\",\n      targetHandle: \"handle-top\",\n      label: \"1\",\n      data: {},\n    },\n    {\n      id: \"ed-e\",\n      source: \"d\",\n      target: \"e\",\n      sourceHandle: \"handle-right\",\n      targetHandle: \"handle-left\",\n      label: \"200\",\n      data: {},\n    },\n  ],\n  source: \"1\",\n};\n\nconst square = {\n  nodes: [\n    {\n      id: \"s\",\n      position: \"0,0\",\n      data: {\n        shortestPath: 0,\n        parentId: \"0\",\n      },\n    },\n    {\n      id: \"a\",\n      position: \"100,0\",\n      data: {},\n    },\n    {\n      id: \"t\",\n      position: \"0,100\",\n      data: {},\n    },\n    {\n      id: \"b\",\n      position: \"100,100\",\n      data: {},\n    },\n    {\n      id: \"tx\",\n      position: \"-100,200\",\n      data: {},\n    },\n  ],\n  edges: [\n    {\n      id: \"es-a\",\n      source: \"s\",\n      target: \"a\",\n      sourceHandle: \"handle-right\",\n      targetHandle: \"handle-left\",\n      label: \"1\",\n      data: {},\n    },\n    {\n      id: \"es-t\",\n      source: \"s\",\n      target: \"t\",\n      sourceHandle: \"handle-bottom\",\n      targetHandle: \"handle-top\",\n      label: \"2\",\n      data: {},\n    },\n    {\n      id: \"ea-b\",\n      source: \"a\",\n      target: \"b\",\n      sourceHandle: \"handle-bottom\",\n      targetHandle: \"handle-top\",\n      label: \"1\",\n      data: {},\n    },\n    {\n      id: \"eb-t\",\n      source: \"b\",\n      target: \"t\",\n      sourceHandle: \"handle-left\",\n      targetHandle: \"handle-right\",\n      label: \"1\",\n      data: {},\n    },\n    {\n      id: \"et-tx\",\n      source: \"t\",\n      target: \"tx\",\n      sourceHandle: \"handle-bottom\",\n      targetHandle: \"handle-top\",\n      label: \"10\",\n      data: {},\n    },\n  ],\n};\n\nconst selectedGraph = pentagon;\n\nconst v3Graph = createSlice({\n  name: \"v3Graph\",\n  initialState: selectedGraph,\n  reducers: {\n    reset: (state, action) => {\n      return selectedGraph;\n    },\n    visit: (state, action) => {\n      const { nodeId } = action.payload;\n      const node = getNode(nodeId, state);\n      const [shortestPath, parentId] = getShortestPath(nodeId, state);\n      node.data = { shortestPath, parentId };\n    },\n    highlightPath: (state, action) => {\n      let { nodeId: currentNodeId } = action.payload;\n      let currentNode = getNode(currentNodeId, state);\n      let parentNodeId = currentNode.data.parentId;\n      while (parentNodeId !== \"0\") {\n        const index = state.edges.findIndex(\n          (edge) =>\n            edge.source === parentNodeId && edge.target === currentNodeId\n        );\n        // console.log(\n        //   `found edge ${parentNodeId} -> ${currentNodeId} at ${index}`\n        // );\n        state.edges[index].data.isHighlighted = true;\n        console.dir(JSON.stringify(state.edges[index]));\n        const parentNode = getNode(parentNodeId, state);\n        currentNodeId = parentNodeId;\n        parentNodeId = parentNode.data.parentId;\n      }\n    },\n    clearHighlightedPath: (state, action) => {\n      for (const [index, edge] of state.edges.entries()) {\n        state.edges[index].data.isHighlighted = false;\n      }\n    },\n  },\n});\n\nexport const actions = {\n  reset: () => (dispatch) => dispatch(v3Graph.actions.reset()),\n  select:\n    ({ nodeId }) =>\n    (dispatch, getState) => {\n      const { v3Graph: graphState } = getState();\n      dispatch(v3Graph.actions.clearHighlightedPath());\n      dispatch(v3Graph.actions.visit({ nodeId }));\n      dispatch(v3Graph.actions.highlightPath({ nodeId }));\n    },\n};\n\nexport default v3Graph.reducer;\n","import { Grid } from \"@material-ui/core\";\nimport React from \"react\";\nimport ReactFlow from \"react-flow-renderer/nocss\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { actions as graphActions } from \"../../store/slices/v3Graph\";\nimport { isEdge, processEdge, processNode } from \"../../utils\";\n\nimport CustomEdge from \"../CustomEdge\";\nimport CustomNode from \"../CustomNode\";\n\nconst V3Graph = () => {\n  const dispatch = useDispatch();\n\n  const elements = useSelector((state) => {\n    const { nodes, edges } = state.v3Graph;\n    return nodes.map(processNode).concat(edges.map(processEdge));\n  });\n\n  const handleElementClick = (event, element) => {\n    if (isEdge(element)) {\n      return;\n    }\n    dispatch(\n      graphActions.select({\n        nodeId: element.id,\n      })\n    );\n  };\n\n  return (\n    <Grid className=\"grid-container\" container>\n      <Grid md={4}>\n        <div className=\"content-container\">\n          <p className=\"title\">Objective</p>\n          <p>\n            Given a directed graph with non-negative weights, find the shortest\n            path from the source node to every node in the graph.\n          </p>\n          <p className=\"title\">Setup</p>\n          <p>Hi!</p>\n        </div>\n      </Grid>\n      <Grid md={8} className=\"graph-container\">\n        <ReactFlow\n          zoomOnDoubleClick={false}\n          zoomOnScroll={false}\n          paneMoveable={false}\n          onLoad={(f) => f.fitView()}\n          onElementClick={handleElementClick}\n          elements={elements}\n          nodesDraggable={false}\n          nodesConnectable={false}\n          nodeTypes={{\n            customNode: CustomNode,\n          }}\n          edgeTypes={{\n            customEdge: CustomEdge,\n          }}\n        />\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default V3Graph;\n","import React, { useEffect, useState } from \"react\";\nimport {\n  AppBar,\n  Grid,\n  Tab,\n  Tabs,\n  Toolbar,\n  Typography,\n} from \"@material-ui/core\";\n\nimport \"./App.css\";\nimport { useDispatch } from \"react-redux\";\nimport Notifier from \"./components/Notifier\";\nimport V1Graph from \"./components/V1Graph\";\nimport V2Graph from \"./components/V2Graph\";\nimport V3Graph from \"./components/V3Graph\";\nimport { actions as v1GraphActions } from \"./store/slices/v1Graph\";\nimport { actions as v2GraphActions } from \"./store/slices/v2Graph\";\nimport { actions as v3GraphActions } from \"./store/slices/v3Graph\";\n\nconst App = () => {\n  const [selectedTab, setSelectedTab] = useState(0);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(v1GraphActions.reset());\n    dispatch(v2GraphActions.reset());\n    dispatch(v3GraphActions.reset());\n  }, [selectedTab]);\n\n  return (\n    <div className=\"root\">\n      <Notifier />\n      <AppBar className=\"appbar\" position=\"relative\">\n        <Toolbar>\n          <Grid container justify=\"space-between\" alignItems=\"center\">\n            <Grid item>\n              <Typography variant=\"h6\">\n                Shortest Path using Dynamic Programming\n              </Typography>\n            </Grid>\n            <Grid item>\n              <Tabs\n                value={selectedTab}\n                onChange={(e, value) => {\n                  setSelectedTab(value);\n                }}\n              >\n                <Tab label=\"v1\" />\n                <Tab label=\"v2\" />\n              </Tabs>\n            </Grid>\n          </Grid>\n        </Toolbar>\n      </AppBar>\n      {selectedTab === 0 && <V1Graph />}\n      {selectedTab === 1 && <V2Graph />}\n    </div>\n  );\n};\n\nexport default App;\n","import { combineReducers, configureStore } from \"@reduxjs/toolkit\";\n\nimport v1Graph from \"./slices/v1Graph\";\nimport notifications from \"./slices/notifications\";\nimport v2Graph from \"./slices/v2Graph\";\nimport v3Graph from \"./slices/v3Graph\";\n\nexport default configureStore({\n  reducer: combineReducers({\n    v1Graph,\n    v2Graph,\n    v3Graph,\n    notifications,\n  }),\n});\n","import \"react-flow-renderer/dist/style.css\";\nimport \"react-flow-renderer/dist/theme-default.css\";\nimport { SnackbarProvider } from \"notistack\";\nimport React from \"react\";\nimport { render } from \"react-dom\";\nimport { Provider } from \"react-redux\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport store from \"./store\";\n\nrender(\n  <Provider store={store}>\n    <SnackbarProvider\n      anchorOrigin={{\n        vertical: \"top\",\n        horizontal: \"right\",\n      }}\n    >\n      <App />\n    </SnackbarProvider>\n  </Provider>,\n  document.querySelector(\"#app\")\n);\n"],"sourceRoot":""}